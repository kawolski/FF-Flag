{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getPagedAsyncIterator } from \"@azure/core-paging\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { SyncTokens, syncTokenPolicy } from \"./internal/synctokenpolicy\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { assertResponse, checkAndFormatIfAndIfNoneMatch, extractAfterTokenFromNextLink, formatAcceptDateTime, formatFieldsForSelect, formatFiltersAndSelect, makeConfigurationSettingEmpty, serializeAsConfigurationSettingParam, transformKeyValue, transformKeyValueResponse, transformKeyValueResponseWithStatusCode } from \"./internal/helpers\";\nimport { AppConfiguration } from \"./generated/src/appConfiguration\";\nimport { appConfigKeyCredentialPolicy } from \"./appConfigCredential\";\nimport { tracingClient } from \"./internal/tracing\";\nimport { logger } from \"./logger\";\nconst apiVersion = \"1.0\";\nconst ConnectionStringRegex = /Endpoint=(.*);Id=(.*);Secret=(.*)/;\nconst deserializationContentTypes = {\n  json: [\"application/vnd.microsoft.appconfig.kvset+json\", \"application/vnd.microsoft.appconfig.kv+json\", \"application/vnd.microsoft.appconfig.kvs+json\", \"application/vnd.microsoft.appconfig.keyset+json\", \"application/vnd.microsoft.appconfig.revs+json\"]\n};\n/**\n * Client for the Azure App Configuration service.\n */\n\nexport class AppConfigurationClient {\n  constructor(connectionStringOrEndpoint, tokenCredentialOrOptions, options) {\n    let appConfigOptions = {};\n    let appConfigCredential;\n    let appConfigEndpoint;\n    let authPolicy;\n\n    if (isTokenCredential(tokenCredentialOrOptions)) {\n      appConfigOptions = options || {};\n      appConfigCredential = tokenCredentialOrOptions;\n      appConfigEndpoint = connectionStringOrEndpoint.endsWith(\"/\") ? connectionStringOrEndpoint.slice(0, -1) : connectionStringOrEndpoint;\n      authPolicy = bearerTokenAuthenticationPolicy({\n        scopes: `${appConfigEndpoint}/.default`,\n        credential: appConfigCredential\n      });\n    } else {\n      appConfigOptions = tokenCredentialOrOptions || {};\n      const regexMatch = connectionStringOrEndpoint === null || connectionStringOrEndpoint === void 0 ? void 0 : connectionStringOrEndpoint.match(ConnectionStringRegex);\n\n      if (regexMatch) {\n        appConfigEndpoint = regexMatch[1];\n        authPolicy = appConfigKeyCredentialPolicy(regexMatch[2], regexMatch[3]);\n      } else {\n        throw new Error(`Invalid connection string. Valid connection strings should match the regex '${ConnectionStringRegex.source}'.`);\n      }\n    }\n\n    const internalClientPipelineOptions = Object.assign(Object.assign({}, appConfigOptions), {\n      loggingOptions: {\n        logger: logger.info\n      },\n      deserializationOptions: {\n        expectedContentTypes: deserializationContentTypes\n      }\n    });\n    this._syncTokens = appConfigOptions.syncTokens || new SyncTokens();\n    this.client = new AppConfiguration(appConfigEndpoint, apiVersion, internalClientPipelineOptions);\n    this.client.pipeline.addPolicy(authPolicy, {\n      phase: \"Sign\"\n    });\n    this.client.pipeline.addPolicy(syncTokenPolicy(this._syncTokens), {\n      afterPhase: \"Retry\"\n    });\n  }\n  /**\n   * Add a setting into the Azure App Configuration service, failing if it\n   * already exists.\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.addConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\", value: \"MyValue\" });\n   * ```\n   * @param configurationSetting - A configuration setting.\n   * @param options - Optional parameters for the request.\n   */\n\n\n  addConfigurationSetting(configurationSetting, options = {}) {\n    var _this = this;\n\n    return tracingClient.withSpan(\"AppConfigurationClient.addConfigurationSetting\", options, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (updatedOptions) {\n        const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n        logger.info(\"[addConfigurationSetting] Creating a key value pair\");\n\n        try {\n          const originalResponse = yield _this.client.putKeyValue(configurationSetting.key, Object.assign({\n            ifNoneMatch: \"*\",\n            label: configurationSetting.label,\n            entity: keyValue\n          }, updatedOptions));\n          const response = transformKeyValueResponse(originalResponse);\n          assertResponse(response);\n          return response;\n        } catch (error) {\n          const err = error; // Service does not return an error message. Raise a 412 error similar to .NET\n\n          if (err.statusCode === 412) {\n            err.message = `Status 412: Setting was already present`;\n          }\n\n          throw err;\n        }\n\n        throw new Error(\"Unreachable code\");\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Delete a setting from the Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const deletedSetting = await client.deleteConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to delete.\n   * @param options - Optional parameters for the request (ex: etag, label)\n   */\n\n\n  deleteConfigurationSetting(id, options = {}) {\n    var _this2 = this;\n\n    return tracingClient.withSpan(\"AppConfigurationClient.deleteConfigurationSetting\", options, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (updatedOptions) {\n        let status;\n        logger.info(\"[deleteConfigurationSetting] Deleting key value pair\");\n        const originalResponse = yield _this2.client.deleteKeyValue(id.key, Object.assign(Object.assign(Object.assign({\n          label: id.label\n        }, updatedOptions), checkAndFormatIfAndIfNoneMatch(id, options)), {\n          onResponse: response => {\n            status = response.status;\n          }\n        }));\n        const response = transformKeyValueResponseWithStatusCode(originalResponse, status);\n        assertResponse(response);\n        return response;\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Gets a setting from the Azure App Configuration service.\n   *\n   * Example code:\n   * ```ts\n   * const setting = await client.getConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to get.\n   * @param options - Optional parameters for the request.\n   */\n\n\n  getConfigurationSetting(id, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"AppConfigurationClient.getConfigurationSetting\", options, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (updatedOptions) {\n          let status;\n          logger.info(\"[getConfigurationSetting] Getting key value pair\");\n          const originalResponse = yield _this3.client.getKeyValue(id.key, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), {\n            label: id.label,\n            select: formatFieldsForSelect(options.fields)\n          }), formatAcceptDateTime(options)), checkAndFormatIfAndIfNoneMatch(id, options)), {\n            onResponse: response => {\n              status = response.status;\n            }\n          }));\n          const response = transformKeyValueResponseWithStatusCode(originalResponse, status); // 304 only comes back if the user has passed a conditional option in their\n          // request _and_ the remote object has the same etag as what the user passed.\n\n          if (response.statusCode === 304) {\n            // this is one of our few 'required' fields so we'll make sure it does get initialized\n            // with a value\n            response.key = id.key; // and now we'll undefine all the other properties that are not HTTP related\n\n            makeConfigurationSettingEmpty(response);\n          }\n\n          assertResponse(response);\n          return response;\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Lists settings from the Azure App Configuration service, optionally\n   * filtered by key names, labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const allSettingsWithLabel = client.listConfigurationSettings({ labelFilter: \"MyLabel\" });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n\n\n  listConfigurationSettings(options = {}) {\n    var _this4 = this;\n\n    const pagedResult = {\n      firstPageLink: undefined,\n      getPage: function () {\n        var _ref4 = _asyncToGenerator(function* (pageLink) {\n          var _a;\n\n          const response = yield _this4.sendConfigurationSettingsRequest(options, pageLink);\n          const currentResponse = Object.assign(Object.assign({}, response), {\n            items: response.items != null ? (_a = response.items) === null || _a === void 0 ? void 0 : _a.map(transformKeyValue) : [],\n            continuationToken: response.nextLink ? extractAfterTokenFromNextLink(response.nextLink) : undefined\n          });\n          return {\n            page: currentResponse,\n            nextPageLink: currentResponse.continuationToken\n          };\n        });\n\n        return function getPage(_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }(),\n      toElements: page => page.items\n    };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  sendConfigurationSettingsRequest(options = {}, pageLink) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"AppConfigurationClient.listConfigurationSettings\", options, /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (updatedOptions) {\n          const response = yield _this5.client.getKeyValues(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), formatAcceptDateTime(options)), formatFiltersAndSelect(options)), {\n            after: pageLink\n          }));\n          return response;\n        });\n\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Lists revisions of a set of keys, optionally filtered by key names,\n   * labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const revisionsIterator = client.listRevisions({ keys: [\"MyKey\"] });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n\n\n  listRevisions(options) {\n    var _this6 = this;\n\n    const pagedResult = {\n      firstPageLink: undefined,\n      getPage: function () {\n        var _ref6 = _asyncToGenerator(function* (pageLink) {\n          const response = yield _this6.sendRevisionsRequest(options, pageLink);\n          const currentResponse = Object.assign(Object.assign({}, response), {\n            items: response.items != null ? response.items.map(transformKeyValue) : [],\n            continuationToken: response.nextLink ? extractAfterTokenFromNextLink(response.nextLink) : undefined\n          }); // let itemList = currentResponse.items;\n\n          return {\n            page: currentResponse,\n            nextPageLink: currentResponse.continuationToken\n          };\n        });\n\n        return function getPage(_x6) {\n          return _ref6.apply(this, arguments);\n        };\n      }(),\n      toElements: page => page.items\n    };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  sendRevisionsRequest(options = {}, pageLink) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"AppConfigurationClient.listRevisions\", options, /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (updatedOptions) {\n          const response = yield _this7.client.getRevisions(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), formatAcceptDateTime(options)), formatFiltersAndSelect(updatedOptions)), {\n            after: pageLink\n          }));\n          return response;\n        });\n\n        return function (_x7) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sets the value of a key in the Azure App Configuration service, allowing for an optional etag.\n   * @param key - The name of the key.\n   * @param configurationSetting - A configuration value.\n   * @param options - Optional parameters for the request.\n   *\n   * Example code:\n   * ```ts\n   * await client.setConfigurationSetting({ key: \"MyKey\", value: \"MyValue\" });\n   * ```\n   */\n\n\n  setConfigurationSetting(configurationSetting, options = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"AppConfigurationClient.setConfigurationSetting\", options, /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator(function* (updatedOptions) {\n          const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n          logger.info(\"[setConfigurationSetting] Setting new key value\");\n          const response = transformKeyValueResponse(yield _this8.client.putKeyValue(configurationSetting.key, Object.assign(Object.assign(Object.assign({}, updatedOptions), {\n            label: configurationSetting.label,\n            entity: keyValue\n          }), checkAndFormatIfAndIfNoneMatch(configurationSetting, options))));\n          assertResponse(response);\n          return response;\n        });\n\n        return function (_x8) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Sets or clears a key's read-only status.\n   * @param id - The id of the configuration setting to modify.\n   */\n\n\n  setReadOnly(id, readOnly, options = {}) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(\"AppConfigurationClient.setReadOnly\", options, /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator(function* (newOptions) {\n          let response;\n\n          if (readOnly) {\n            logger.info(\"[setReadOnly] Setting read-only status to ${readOnly}\");\n            response = yield _this9.client.putLock(id.key, Object.assign(Object.assign(Object.assign({}, newOptions), {\n              label: id.label\n            }), checkAndFormatIfAndIfNoneMatch(id, options)));\n          } else {\n            logger.info(\"[setReadOnly] Deleting read-only lock\");\n            response = yield _this9.client.deleteLock(id.key, Object.assign(Object.assign(Object.assign({}, newOptions), {\n              label: id.label\n            }), checkAndFormatIfAndIfNoneMatch(id, options)));\n          }\n\n          response = transformKeyValueResponse(response);\n          assertResponse(response);\n          return response;\n        });\n\n        return function (_x9) {\n          return _ref9.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Adds an external synchronization token to ensure service requests receive up-to-date values.\n   *\n   * @param syncToken - The synchronization token value.\n   */\n\n\n  updateSyncToken(syncToken) {\n    this._syncTokens.addSyncTokenFromHeaderValue(syncToken);\n  }\n\n}","map":{"version":3,"names":["getPagedAsyncIterator","bearerTokenAuthenticationPolicy","SyncTokens","syncTokenPolicy","isTokenCredential","assertResponse","checkAndFormatIfAndIfNoneMatch","extractAfterTokenFromNextLink","formatAcceptDateTime","formatFieldsForSelect","formatFiltersAndSelect","makeConfigurationSettingEmpty","serializeAsConfigurationSettingParam","transformKeyValue","transformKeyValueResponse","transformKeyValueResponseWithStatusCode","AppConfiguration","appConfigKeyCredentialPolicy","tracingClient","logger","apiVersion","ConnectionStringRegex","deserializationContentTypes","json","AppConfigurationClient","constructor","connectionStringOrEndpoint","tokenCredentialOrOptions","options","appConfigOptions","appConfigCredential","appConfigEndpoint","authPolicy","endsWith","slice","scopes","credential","regexMatch","match","Error","source","internalClientPipelineOptions","Object","assign","loggingOptions","info","deserializationOptions","expectedContentTypes","_syncTokens","syncTokens","client","pipeline","addPolicy","phase","afterPhase","addConfigurationSetting","configurationSetting","withSpan","updatedOptions","keyValue","originalResponse","putKeyValue","key","ifNoneMatch","label","entity","response","error","err","statusCode","message","deleteConfigurationSetting","id","status","deleteKeyValue","onResponse","getConfigurationSetting","getKeyValue","select","fields","listConfigurationSettings","pagedResult","firstPageLink","undefined","getPage","pageLink","_a","sendConfigurationSettingsRequest","currentResponse","items","map","continuationToken","nextLink","page","nextPageLink","toElements","getKeyValues","after","listRevisions","sendRevisionsRequest","getRevisions","setConfigurationSetting","setReadOnly","readOnly","newOptions","putLock","deleteLock","updateSyncToken","syncToken","addSyncTokenFromHeaderValue"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/app-configuration/dist-esm/src/appConfigurationClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getPagedAsyncIterator } from \"@azure/core-paging\";\nimport { bearerTokenAuthenticationPolicy, } from \"@azure/core-rest-pipeline\";\nimport { SyncTokens, syncTokenPolicy } from \"./internal/synctokenpolicy\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { assertResponse, checkAndFormatIfAndIfNoneMatch, extractAfterTokenFromNextLink, formatAcceptDateTime, formatFieldsForSelect, formatFiltersAndSelect, makeConfigurationSettingEmpty, serializeAsConfigurationSettingParam, transformKeyValue, transformKeyValueResponse, transformKeyValueResponseWithStatusCode, } from \"./internal/helpers\";\nimport { AppConfiguration } from \"./generated/src/appConfiguration\";\nimport { appConfigKeyCredentialPolicy } from \"./appConfigCredential\";\nimport { tracingClient } from \"./internal/tracing\";\nimport { logger } from \"./logger\";\nconst apiVersion = \"1.0\";\nconst ConnectionStringRegex = /Endpoint=(.*);Id=(.*);Secret=(.*)/;\nconst deserializationContentTypes = {\n    json: [\n        \"application/vnd.microsoft.appconfig.kvset+json\",\n        \"application/vnd.microsoft.appconfig.kv+json\",\n        \"application/vnd.microsoft.appconfig.kvs+json\",\n        \"application/vnd.microsoft.appconfig.keyset+json\",\n        \"application/vnd.microsoft.appconfig.revs+json\",\n    ],\n};\n/**\n * Client for the Azure App Configuration service.\n */\nexport class AppConfigurationClient {\n    constructor(connectionStringOrEndpoint, tokenCredentialOrOptions, options) {\n        let appConfigOptions = {};\n        let appConfigCredential;\n        let appConfigEndpoint;\n        let authPolicy;\n        if (isTokenCredential(tokenCredentialOrOptions)) {\n            appConfigOptions = options || {};\n            appConfigCredential = tokenCredentialOrOptions;\n            appConfigEndpoint = connectionStringOrEndpoint.endsWith(\"/\")\n                ? connectionStringOrEndpoint.slice(0, -1)\n                : connectionStringOrEndpoint;\n            authPolicy = bearerTokenAuthenticationPolicy({\n                scopes: `${appConfigEndpoint}/.default`,\n                credential: appConfigCredential,\n            });\n        }\n        else {\n            appConfigOptions = tokenCredentialOrOptions || {};\n            const regexMatch = connectionStringOrEndpoint === null || connectionStringOrEndpoint === void 0 ? void 0 : connectionStringOrEndpoint.match(ConnectionStringRegex);\n            if (regexMatch) {\n                appConfigEndpoint = regexMatch[1];\n                authPolicy = appConfigKeyCredentialPolicy(regexMatch[2], regexMatch[3]);\n            }\n            else {\n                throw new Error(`Invalid connection string. Valid connection strings should match the regex '${ConnectionStringRegex.source}'.`);\n            }\n        }\n        const internalClientPipelineOptions = Object.assign(Object.assign({}, appConfigOptions), { loggingOptions: {\n                logger: logger.info,\n            }, deserializationOptions: {\n                expectedContentTypes: deserializationContentTypes,\n            } });\n        this._syncTokens = appConfigOptions.syncTokens || new SyncTokens();\n        this.client = new AppConfiguration(appConfigEndpoint, apiVersion, internalClientPipelineOptions);\n        this.client.pipeline.addPolicy(authPolicy, { phase: \"Sign\" });\n        this.client.pipeline.addPolicy(syncTokenPolicy(this._syncTokens), { afterPhase: \"Retry\" });\n    }\n    /**\n     * Add a setting into the Azure App Configuration service, failing if it\n     * already exists.\n     *\n     * Example usage:\n     * ```ts\n     * const result = await client.addConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\", value: \"MyValue\" });\n     * ```\n     * @param configurationSetting - A configuration setting.\n     * @param options - Optional parameters for the request.\n     */\n    addConfigurationSetting(configurationSetting, options = {}) {\n        return tracingClient.withSpan(\"AppConfigurationClient.addConfigurationSetting\", options, async (updatedOptions) => {\n            const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n            logger.info(\"[addConfigurationSetting] Creating a key value pair\");\n            try {\n                const originalResponse = await this.client.putKeyValue(configurationSetting.key, Object.assign({ ifNoneMatch: \"*\", label: configurationSetting.label, entity: keyValue }, updatedOptions));\n                const response = transformKeyValueResponse(originalResponse);\n                assertResponse(response);\n                return response;\n            }\n            catch (error) {\n                const err = error;\n                // Service does not return an error message. Raise a 412 error similar to .NET\n                if (err.statusCode === 412) {\n                    err.message = `Status 412: Setting was already present`;\n                }\n                throw err;\n            }\n            throw new Error(\"Unreachable code\");\n        });\n    }\n    /**\n     * Delete a setting from the Azure App Configuration service\n     *\n     * Example usage:\n     * ```ts\n     * const deletedSetting = await client.deleteConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n     * ```\n     * @param id - The id of the configuration setting to delete.\n     * @param options - Optional parameters for the request (ex: etag, label)\n     */\n    deleteConfigurationSetting(id, options = {}) {\n        return tracingClient.withSpan(\"AppConfigurationClient.deleteConfigurationSetting\", options, async (updatedOptions) => {\n            let status;\n            logger.info(\"[deleteConfigurationSetting] Deleting key value pair\");\n            const originalResponse = await this.client.deleteKeyValue(id.key, Object.assign(Object.assign(Object.assign({ label: id.label }, updatedOptions), checkAndFormatIfAndIfNoneMatch(id, options)), { onResponse: (response) => {\n                    status = response.status;\n                } }));\n            const response = transformKeyValueResponseWithStatusCode(originalResponse, status);\n            assertResponse(response);\n            return response;\n        });\n    }\n    /**\n     * Gets a setting from the Azure App Configuration service.\n     *\n     * Example code:\n     * ```ts\n     * const setting = await client.getConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n     * ```\n     * @param id - The id of the configuration setting to get.\n     * @param options - Optional parameters for the request.\n     */\n    async getConfigurationSetting(id, options = {}) {\n        return tracingClient.withSpan(\"AppConfigurationClient.getConfigurationSetting\", options, async (updatedOptions) => {\n            let status;\n            logger.info(\"[getConfigurationSetting] Getting key value pair\");\n            const originalResponse = await this.client.getKeyValue(id.key, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), { label: id.label, select: formatFieldsForSelect(options.fields) }), formatAcceptDateTime(options)), checkAndFormatIfAndIfNoneMatch(id, options)), { onResponse: (response) => {\n                    status = response.status;\n                } }));\n            const response = transformKeyValueResponseWithStatusCode(originalResponse, status);\n            // 304 only comes back if the user has passed a conditional option in their\n            // request _and_ the remote object has the same etag as what the user passed.\n            if (response.statusCode === 304) {\n                // this is one of our few 'required' fields so we'll make sure it does get initialized\n                // with a value\n                response.key = id.key;\n                // and now we'll undefine all the other properties that are not HTTP related\n                makeConfigurationSettingEmpty(response);\n            }\n            assertResponse(response);\n            return response;\n        });\n    }\n    /**\n     * Lists settings from the Azure App Configuration service, optionally\n     * filtered by key names, labels and accept datetime.\n     *\n     * Example code:\n     * ```ts\n     * const allSettingsWithLabel = client.listConfigurationSettings({ labelFilter: \"MyLabel\" });\n     * ```\n     * @param options - Optional parameters for the request.\n     */\n    listConfigurationSettings(options = {}) {\n        const pagedResult = {\n            firstPageLink: undefined,\n            getPage: async (pageLink) => {\n                var _a;\n                const response = await this.sendConfigurationSettingsRequest(options, pageLink);\n                const currentResponse = Object.assign(Object.assign({}, response), { items: response.items != null ? (_a = response.items) === null || _a === void 0 ? void 0 : _a.map(transformKeyValue) : [], continuationToken: response.nextLink\n                        ? extractAfterTokenFromNextLink(response.nextLink)\n                        : undefined });\n                return {\n                    page: currentResponse,\n                    nextPageLink: currentResponse.continuationToken,\n                };\n            },\n            toElements: (page) => page.items,\n        };\n        return getPagedAsyncIterator(pagedResult);\n    }\n    async sendConfigurationSettingsRequest(options = {}, pageLink) {\n        return tracingClient.withSpan(\"AppConfigurationClient.listConfigurationSettings\", options, async (updatedOptions) => {\n            const response = await this.client.getKeyValues(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), formatAcceptDateTime(options)), formatFiltersAndSelect(options)), { after: pageLink }));\n            return response;\n        });\n    }\n    /**\n     * Lists revisions of a set of keys, optionally filtered by key names,\n     * labels and accept datetime.\n     *\n     * Example code:\n     * ```ts\n     * const revisionsIterator = client.listRevisions({ keys: [\"MyKey\"] });\n     * ```\n     * @param options - Optional parameters for the request.\n     */\n    listRevisions(options) {\n        const pagedResult = {\n            firstPageLink: undefined,\n            getPage: async (pageLink) => {\n                const response = await this.sendRevisionsRequest(options, pageLink);\n                const currentResponse = Object.assign(Object.assign({}, response), { items: response.items != null ? response.items.map(transformKeyValue) : [], continuationToken: response.nextLink\n                        ? extractAfterTokenFromNextLink(response.nextLink)\n                        : undefined });\n                // let itemList = currentResponse.items;\n                return {\n                    page: currentResponse,\n                    nextPageLink: currentResponse.continuationToken,\n                };\n            },\n            toElements: (page) => page.items,\n        };\n        return getPagedAsyncIterator(pagedResult);\n    }\n    async sendRevisionsRequest(options = {}, pageLink) {\n        return tracingClient.withSpan(\"AppConfigurationClient.listRevisions\", options, async (updatedOptions) => {\n            const response = await this.client.getRevisions(Object.assign(Object.assign(Object.assign(Object.assign({}, updatedOptions), formatAcceptDateTime(options)), formatFiltersAndSelect(updatedOptions)), { after: pageLink }));\n            return response;\n        });\n    }\n    /**\n     * Sets the value of a key in the Azure App Configuration service, allowing for an optional etag.\n     * @param key - The name of the key.\n     * @param configurationSetting - A configuration value.\n     * @param options - Optional parameters for the request.\n     *\n     * Example code:\n     * ```ts\n     * await client.setConfigurationSetting({ key: \"MyKey\", value: \"MyValue\" });\n     * ```\n     */\n    async setConfigurationSetting(configurationSetting, options = {}) {\n        return tracingClient.withSpan(\"AppConfigurationClient.setConfigurationSetting\", options, async (updatedOptions) => {\n            const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n            logger.info(\"[setConfigurationSetting] Setting new key value\");\n            const response = transformKeyValueResponse(await this.client.putKeyValue(configurationSetting.key, Object.assign(Object.assign(Object.assign({}, updatedOptions), { label: configurationSetting.label, entity: keyValue }), checkAndFormatIfAndIfNoneMatch(configurationSetting, options))));\n            assertResponse(response);\n            return response;\n        });\n    }\n    /**\n     * Sets or clears a key's read-only status.\n     * @param id - The id of the configuration setting to modify.\n     */\n    async setReadOnly(id, readOnly, options = {}) {\n        return tracingClient.withSpan(\"AppConfigurationClient.setReadOnly\", options, async (newOptions) => {\n            let response;\n            if (readOnly) {\n                logger.info(\"[setReadOnly] Setting read-only status to ${readOnly}\");\n                response = await this.client.putLock(id.key, Object.assign(Object.assign(Object.assign({}, newOptions), { label: id.label }), checkAndFormatIfAndIfNoneMatch(id, options)));\n            }\n            else {\n                logger.info(\"[setReadOnly] Deleting read-only lock\");\n                response = await this.client.deleteLock(id.key, Object.assign(Object.assign(Object.assign({}, newOptions), { label: id.label }), checkAndFormatIfAndIfNoneMatch(id, options)));\n            }\n            response = transformKeyValueResponse(response);\n            assertResponse(response);\n            return response;\n        });\n    }\n    /**\n     * Adds an external synchronization token to ensure service requests receive up-to-date values.\n     *\n     * @param syncToken - The synchronization token value.\n     */\n    updateSyncToken(syncToken) {\n        this._syncTokens.addSyncTokenFromHeaderValue(syncToken);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}