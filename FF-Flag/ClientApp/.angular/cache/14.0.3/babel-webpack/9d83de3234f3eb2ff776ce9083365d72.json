{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\n\nexport class AzureNamedKeyCredential {\n  /**\n   * The value of the key to be used in authentication.\n   */\n  get key() {\n    return this._key;\n  }\n  /**\n   * The value of the name to be used in authentication.\n   */\n\n\n  get name() {\n    return this._name;\n  }\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n\n\n  constructor(name, key) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n\n    this._name = name;\n    this._key = key;\n  }\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n\n\n  update(newName, newKey) {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n\n    this._name = newName;\n    this._key = newKey;\n  }\n\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\n\nexport function isNamedKeyCredential(credential) {\n  return isObjectWithProperties(credential, [\"name\", \"key\"]) && typeof credential.key === \"string\" && typeof credential.name === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureNamedKeyCredential","key","_key","name","_name","constructor","TypeError","update","newName","newKey","isNamedKeyCredential","credential"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-auth/dist-esm/src/azureNamedKeyCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential) {\n    return (isObjectWithProperties(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAT,QAAuC,kBAAvC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAN,CAA8B;EACjC;AACJ;AACA;EACW,IAAHC,GAAG,GAAG;IACN,OAAO,KAAKC,IAAZ;EACH;EACD;AACJ;AACA;;;EACY,IAAJC,IAAI,GAAG;IACP,OAAO,KAAKC,KAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,WAAW,CAACF,IAAD,EAAOF,GAAP,EAAY;IACnB,IAAI,CAACE,IAAD,IAAS,CAACF,GAAd,EAAmB;MACf,MAAM,IAAIK,SAAJ,CAAc,wCAAd,CAAN;IACH;;IACD,KAAKF,KAAL,GAAaD,IAAb;IACA,KAAKD,IAAL,GAAYD,GAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIM,MAAM,CAACC,OAAD,EAAUC,MAAV,EAAkB;IACpB,IAAI,CAACD,OAAD,IAAY,CAACC,MAAjB,EAAyB;MACrB,MAAM,IAAIH,SAAJ,CAAc,8CAAd,CAAN;IACH;;IACD,KAAKF,KAAL,GAAaI,OAAb;IACA,KAAKN,IAAL,GAAYO,MAAZ;EACH;;AA1CgC;AA4CrC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA0C;EAC7C,OAAQZ,sBAAsB,CAACY,UAAD,EAAa,CAAC,MAAD,EAAS,KAAT,CAAb,CAAtB,IACJ,OAAOA,UAAU,CAACV,GAAlB,KAA0B,QADtB,IAEJ,OAAOU,UAAU,CAACR,IAAlB,KAA2B,QAF/B;AAGH"},"metadata":{},"sourceType":"module"}