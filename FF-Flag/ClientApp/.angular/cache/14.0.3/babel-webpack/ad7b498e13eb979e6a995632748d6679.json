{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreClientLogger } from \"./log\";\nimport { decodeStringToString } from \"./base64\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\n\nexport function parseCAEChallenge(challenges) {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter(x => x);\n  return bearerChallenges.map(challenge => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter(x => x);\n    const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n      [key]: value\n    }))(keyValue.trim().split('=\"'))); // Key-value pairs to plain object:\n\n    return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});\n  });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\n\nexport function authorizeRequestOnClaimChallenge(_x) {\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}\n\nfunction _authorizeRequestOnClaimChallenge() {\n  _authorizeRequestOnClaimChallenge = _asyncToGenerator(function* (onChallengeOptions) {\n    const {\n      scopes,\n      response\n    } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || coreClientLogger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n\n    if (!challenge) {\n      logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n      return false;\n    }\n\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find(x => x.claims);\n\n    if (!parsedChallenge) {\n      logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n      return false;\n    }\n\n    const accessToken = yield onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n      claims: decodeStringToString(parsedChallenge.claims)\n    });\n\n    if (!accessToken) {\n      return false;\n    }\n\n    onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    return true;\n  });\n  return _authorizeRequestOnClaimChallenge.apply(this, arguments);\n}","map":{"version":3,"names":["logger","coreClientLogger","decodeStringToString","parseCAEChallenge","challenges","bearerChallenges","trim","split","filter","x","map","challenge","challengeParts","keyValuePairs","keyValue","key","value","reduce","a","b","Object","assign","authorizeRequestOnClaimChallenge","onChallengeOptions","scopes","response","headers","get","info","parsedChallenge","find","claims","accessToken","getAccessToken","scope","request","set","token"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-client/dist-esm/src/authorizeRequestOnClaimChallenge.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreClientLogger } from \"./log\";\nimport { decodeStringToString } from \"./base64\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || coreClientLogger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: decodeStringToString(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    return true;\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,MAAM,IAAIC,gBAAnB,QAA2C,OAA3C;AACA,SAASC,oBAAT,QAAqC,UAArC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;EAC1C,MAAMC,gBAAgB,GAAI,KAAID,UAAU,CAACE,IAAX,EAAkB,EAAvB,CAAyBC,KAAzB,CAA+B,WAA/B,EAA4CC,MAA5C,CAAoDC,CAAD,IAAOA,CAA1D,CAAzB;EACA,OAAOJ,gBAAgB,CAACK,GAAjB,CAAsBC,SAAD,IAAe;IACvC,MAAMC,cAAc,GAAI,GAAED,SAAS,CAACL,IAAV,EAAiB,IAApB,CAAwBC,KAAxB,CAA8B,KAA9B,EAAqCC,MAArC,CAA6CC,CAAD,IAAOA,CAAnD,CAAvB;IACA,MAAMI,aAAa,GAAGD,cAAc,CAACF,GAAf,CAAoBI,QAAD,IAAc,CAAC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,MAAmB;MAAE,CAACD,GAAD,GAAOC;IAAT,CAAnB,CAAD,EAAuCF,QAAQ,CAACR,IAAT,GAAgBC,KAAhB,CAAsB,IAAtB,CAAvC,CAAjC,CAAtB,CAFuC,CAGvC;;IACA,OAAOM,aAAa,CAACI,MAAd,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAWC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,CAAd,EAAoCC,CAApC,CAAhC,EAAyE,EAAzE,CAAP;EACH,CALM,CAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBG,gCAAtB;EAAA;AAAA;;;wDAAO,WAAgDC,kBAAhD,EAAoE;IACvE,MAAM;MAAEC,MAAF;MAAUC;IAAV,IAAuBF,kBAA7B;IACA,MAAMvB,MAAM,GAAGuB,kBAAkB,CAACvB,MAAnB,IAA6BC,gBAA5C;IACA,MAAMU,SAAS,GAAGc,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAqB,kBAArB,CAAlB;;IACA,IAAI,CAAChB,SAAL,EAAgB;MACZX,MAAM,CAAC4B,IAAP,CAAa,kHAAb;MACA,OAAO,KAAP;IACH;;IACD,MAAMxB,UAAU,GAAGD,iBAAiB,CAACQ,SAAD,CAAjB,IAAgC,EAAnD;IACA,MAAMkB,eAAe,GAAGzB,UAAU,CAAC0B,IAAX,CAAiBrB,CAAD,IAAOA,CAAC,CAACsB,MAAzB,CAAxB;;IACA,IAAI,CAACF,eAAL,EAAsB;MAClB7B,MAAM,CAAC4B,IAAP,CAAa,iIAAb;MACA,OAAO,KAAP;IACH;;IACD,MAAMI,WAAW,SAAST,kBAAkB,CAACU,cAAnB,CAAkCJ,eAAe,CAACK,KAAhB,GAAwB,CAACL,eAAe,CAACK,KAAjB,CAAxB,GAAkDV,MAApF,EAA4F;MAClHO,MAAM,EAAE7B,oBAAoB,CAAC2B,eAAe,CAACE,MAAjB;IADsF,CAA5F,CAA1B;;IAGA,IAAI,CAACC,WAAL,EAAkB;MACd,OAAO,KAAP;IACH;;IACDT,kBAAkB,CAACY,OAAnB,CAA2BT,OAA3B,CAAmCU,GAAnC,CAAuC,eAAvC,EAAyD,UAASJ,WAAW,CAACK,KAAM,EAApF;IACA,OAAO,IAAP;EACH,C"},"metadata":{},"sourceType":"module"}