{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\n\nclass RestError extends Error {\n  constructor(message, options = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n  /**\n   * Logging method for util.inspect in Node\n   */\n\n\n  [custom]() {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\n\n\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\n\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\nexport { RestError };\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\n\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n\n  return isError(e) && e.name === \"RestError\";\n}","map":{"version":3,"names":["isError","custom","Sanitizer","errorSanitizer","RestError","Error","constructor","message","options","name","code","statusCode","request","response","Object","setPrototypeOf","prototype","sanitize","REQUEST_SEND_ERROR","PARSE_ERROR","isRestError","e"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/restError.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        this.request = options.request;\n        this.response = options.response;\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\nexport { RestError };\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return isError(e) && e.name === \"RestError\";\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,MAAMC,cAAc,GAAG,IAAID,SAAJ,EAAvB;AACA;AACA;AACA;;AACA,MAAME,SAAN,SAAwBC,KAAxB,CAA8B;EAC1BC,WAAW,CAACC,OAAD,EAAUC,OAAO,GAAG,EAApB,EAAwB;IAC/B,MAAMD,OAAN;IACA,KAAKE,IAAL,GAAY,WAAZ;IACA,KAAKC,IAAL,GAAYF,OAAO,CAACE,IAApB;IACA,KAAKC,UAAL,GAAkBH,OAAO,CAACG,UAA1B;IACA,KAAKC,OAAL,GAAeJ,OAAO,CAACI,OAAvB;IACA,KAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAxB;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BX,SAAS,CAACY,SAAtC;EACH;EACD;AACJ;AACA;;;EACW,CAANf,MAAM,IAAI;IACP,OAAQ,cAAa,KAAKM,OAAQ,OAAMJ,cAAc,CAACc,QAAf,CAAwB,IAAxB,CAA8B,EAAtE;EACH;;AAfyB;AAiB9B;AACA;AACA;AACA;AACA;;;AACAb,SAAS,CAACc,kBAAV,GAA+B,oBAA/B;AACA;AACA;AACA;AACA;;AACAd,SAAS,CAACe,WAAV,GAAwB,aAAxB;AACA,SAASf,SAAT;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,WAAT,CAAqBC,CAArB,EAAwB;EAC3B,IAAIA,CAAC,YAAYjB,SAAjB,EAA4B;IACxB,OAAO,IAAP;EACH;;EACD,OAAOJ,OAAO,CAACqB,CAAD,CAAP,IAAcA,CAAC,CAACZ,IAAF,KAAW,WAAhC;AACH"},"metadata":{},"sourceType":"module"}