{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { FeatureFlagHelper, featureFlagContentType } from \"../featureFlag\";\nimport { SecretReferenceHelper, secretReferenceContentType } from \"../secretReference\";\nimport { isDefined } from \"@azure/core-util\";\nimport { logger } from \"../logger\";\n/**\n * Formats the etag so it can be used with a If-Match/If-None-Match header\n * @internal\n */\n\nexport function quoteETag(etag) {\n  // https://tools.ietf.org/html/rfc7232#section-3.1\n  if (etag === undefined || etag === \"*\") {\n    return etag;\n  }\n\n  if (etag.startsWith('\"') && etag.endsWith('\"')) {\n    return etag;\n  }\n\n  if (etag.startsWith(\"'\") && etag.endsWith(\"'\")) {\n    return etag;\n  }\n\n  return `\"${etag}\"`;\n}\n/**\n * Checks the onlyIfChanged/onlyIfUnchanged properties to make sure we haven't specified both\n * and throws an Error. Otherwise, returns the properties properly quoted.\n * @param options - An options object with onlyIfChanged/onlyIfUnchanged fields\n * @internal\n */\n\nexport function checkAndFormatIfAndIfNoneMatch(configurationSetting, options) {\n  if (options.onlyIfChanged && options.onlyIfUnchanged) {\n    logger.error(\"onlyIfChanged and onlyIfUnchanged are both specified\", options.onlyIfChanged, options.onlyIfUnchanged);\n    throw new Error(\"onlyIfChanged and onlyIfUnchanged are mutually-exclusive\");\n  }\n\n  let ifMatch;\n  let ifNoneMatch;\n\n  if (options.onlyIfUnchanged) {\n    ifMatch = quoteETag(configurationSetting.etag);\n  }\n\n  if (options.onlyIfChanged) {\n    ifNoneMatch = quoteETag(configurationSetting.etag);\n  }\n\n  return {\n    ifMatch: ifMatch,\n    ifNoneMatch: ifNoneMatch\n  };\n}\n/**\n * Transforms some of the key fields in ListConfigurationSettingsOptions and ListRevisionsOptions\n * so they can be added to a request using AppConfigurationGetKeyValuesOptionalParams.\n * - `options.acceptDateTime` is converted into an ISO string\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter and labelFilter are moved to key and label, respectively.\n *\n * @internal\n */\n\nexport function formatFiltersAndSelect(listConfigOptions) {\n  let acceptDatetime = undefined;\n\n  if (listConfigOptions.acceptDateTime) {\n    acceptDatetime = listConfigOptions.acceptDateTime.toISOString();\n  }\n\n  return {\n    key: listConfigOptions.keyFilter,\n    label: listConfigOptions.labelFilter,\n    acceptDatetime,\n    select: formatFieldsForSelect(listConfigOptions.fields)\n  };\n}\n/**\n * Handles translating a Date acceptDateTime into a string as needed by the API\n * @param newOptions - A newer style options with acceptDateTime as a date (and with proper casing!)\n * @internal\n */\n\nexport function formatAcceptDateTime(newOptions) {\n  return {\n    acceptDatetime: newOptions.acceptDateTime && newOptions.acceptDateTime.toISOString()\n  };\n}\n/**\n * Take the URL that gets returned from next link and extract the 'after' token needed\n * to get the next page of results.\n * @internal\n */\n\nexport function extractAfterTokenFromNextLink(nextLink) {\n  const searchParams = new URLSearchParams(nextLink);\n  const afterToken = searchParams.get(\"after\");\n\n  if (afterToken == null || Array.isArray(afterToken)) {\n    logger.error(\"Invalid nextLink - invalid after token\", afterToken, Array.isArray(afterToken));\n    throw new Error(\"Invalid nextLink - invalid after token\");\n  }\n\n  return decodeURIComponent(afterToken);\n}\n/**\n * Makes a ConfigurationSetting-based response throw for all of the data members. Used primarily\n * to prevent possible errors by the user in accessing a model that is uninitialized. This can happen\n * in cases like HTTP status code 204 or 304, which return an empty response body.\n *\n * @param configurationSetting - The configuration setting to alter\n */\n\nexport function makeConfigurationSettingEmpty(configurationSetting) {\n  const names = [\"contentType\", \"etag\", \"label\", \"lastModified\", \"isReadOnly\", \"tags\", \"value\"];\n\n  for (const name of names) {\n    configurationSetting[name] = undefined;\n  }\n}\n/**\n * @internal\n */\n\nexport function transformKeyValue(kvp) {\n  const setting = Object.assign(Object.assign({\n    value: undefined\n  }, kvp), {\n    isReadOnly: !!kvp.locked\n  });\n  delete setting.locked;\n  return setting;\n}\n/**\n * @internal\n */\n\nfunction isConfigSettingWithSecretReferenceValue(setting) {\n  return setting.contentType === secretReferenceContentType && isDefined(setting.value) && typeof setting.value !== \"string\";\n}\n/**\n * @internal\n */\n\n\nfunction isConfigSettingWithFeatureFlagValue(setting) {\n  return setting.contentType === featureFlagContentType && isDefined(setting.value) && typeof setting.value !== \"string\";\n}\n/**\n * @internal\n */\n\n\nfunction isSimpleConfigSetting(setting) {\n  return typeof setting.value === \"string\" || !isDefined(setting.value);\n}\n/**\n * @internal\n */\n\n\nexport function serializeAsConfigurationSettingParam(setting) {\n  if (isSimpleConfigSetting(setting)) {\n    return setting;\n  }\n\n  try {\n    if (isConfigSettingWithFeatureFlagValue(setting)) {\n      return FeatureFlagHelper.toConfigurationSettingParam(setting);\n    }\n\n    if (isConfigSettingWithSecretReferenceValue(setting)) {\n      return SecretReferenceHelper.toConfigurationSettingParam(setting);\n    }\n  } catch (error) {\n    return setting;\n  }\n\n  logger.error(\"Unable to serialize to a configuration setting\", setting);\n  throw new TypeError(`Unable to serialize the setting with key \"${setting.key}\" as a configuration setting`);\n}\n/**\n * @internal\n */\n\nexport function transformKeyValueResponseWithStatusCode(kvp, status) {\n  const response = Object.assign(Object.assign({}, transformKeyValue(kvp)), {\n    statusCode: status !== null && status !== void 0 ? status : -1\n  });\n\n  if (hasUnderscoreResponse(kvp)) {\n    Object.defineProperty(response, \"_response\", {\n      enumerable: false,\n      value: kvp._response\n    });\n  }\n\n  return response;\n}\n/**\n * @internal\n */\n\nexport function transformKeyValueResponse(kvp) {\n  const setting = transformKeyValue(kvp);\n\n  if (hasUnderscoreResponse(kvp)) {\n    Object.defineProperty(setting, \"_response\", {\n      enumerable: false,\n      value: kvp._response\n    });\n  }\n\n  delete setting.eTag;\n  return setting;\n}\n/**\n * Translates user-facing field names into their `select` equivalents (these can be\n * seen in the `KnownEnum5`)\n *\n * @param fieldNames - fieldNames from users.\n * @returns The field names translated into the `select` field equivalents.\n *\n * @internal\n */\n\nexport function formatFieldsForSelect(fieldNames) {\n  if (fieldNames == null) {\n    return undefined;\n  }\n\n  const mappedFieldNames = fieldNames.map(fn => {\n    switch (fn) {\n      case \"lastModified\":\n        return \"last_modified\";\n\n      case \"contentType\":\n        return \"content_type\";\n\n      case \"isReadOnly\":\n        return \"locked\";\n\n      default:\n        return fn;\n    }\n  });\n  return mappedFieldNames;\n}\n/**\n * @internal\n */\n\nexport function errorMessageForUnexpectedSetting(key, expectedType) {\n  return `Setting with key ${key} is not a valid ${expectedType}, make sure to have the correct content-type and a valid non-null value.`;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function assertResponse(result) {\n  if (!hasUnderscoreResponse(result)) {\n    Object.defineProperty(result, \"_response\", {\n      enumerable: false,\n      value: \"Something went wrong, _response(raw response) is supposed to be part of the response. Please file a bug at https://github.com/Azure/azure-sdk-for-js\"\n    });\n  }\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function hasUnderscoreResponse(result) {\n  return Object.prototype.hasOwnProperty.call(result, \"_response\");\n}","map":{"version":3,"names":["FeatureFlagHelper","featureFlagContentType","SecretReferenceHelper","secretReferenceContentType","isDefined","logger","quoteETag","etag","undefined","startsWith","endsWith","checkAndFormatIfAndIfNoneMatch","configurationSetting","options","onlyIfChanged","onlyIfUnchanged","error","Error","ifMatch","ifNoneMatch","formatFiltersAndSelect","listConfigOptions","acceptDatetime","acceptDateTime","toISOString","key","keyFilter","label","labelFilter","select","formatFieldsForSelect","fields","formatAcceptDateTime","newOptions","extractAfterTokenFromNextLink","nextLink","searchParams","URLSearchParams","afterToken","get","Array","isArray","decodeURIComponent","makeConfigurationSettingEmpty","names","name","transformKeyValue","kvp","setting","Object","assign","value","isReadOnly","locked","isConfigSettingWithSecretReferenceValue","contentType","isConfigSettingWithFeatureFlagValue","isSimpleConfigSetting","serializeAsConfigurationSettingParam","toConfigurationSettingParam","TypeError","transformKeyValueResponseWithStatusCode","status","response","statusCode","hasUnderscoreResponse","defineProperty","enumerable","_response","transformKeyValueResponse","eTag","fieldNames","mappedFieldNames","map","fn","errorMessageForUnexpectedSetting","expectedType","assertResponse","result","prototype","hasOwnProperty","call"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/app-configuration/dist-esm/src/internal/helpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { FeatureFlagHelper, featureFlagContentType } from \"../featureFlag\";\nimport { SecretReferenceHelper, secretReferenceContentType, } from \"../secretReference\";\nimport { isDefined } from \"@azure/core-util\";\nimport { logger } from \"../logger\";\n/**\n * Formats the etag so it can be used with a If-Match/If-None-Match header\n * @internal\n */\nexport function quoteETag(etag) {\n    // https://tools.ietf.org/html/rfc7232#section-3.1\n    if (etag === undefined || etag === \"*\") {\n        return etag;\n    }\n    if (etag.startsWith('\"') && etag.endsWith('\"')) {\n        return etag;\n    }\n    if (etag.startsWith(\"'\") && etag.endsWith(\"'\")) {\n        return etag;\n    }\n    return `\"${etag}\"`;\n}\n/**\n * Checks the onlyIfChanged/onlyIfUnchanged properties to make sure we haven't specified both\n * and throws an Error. Otherwise, returns the properties properly quoted.\n * @param options - An options object with onlyIfChanged/onlyIfUnchanged fields\n * @internal\n */\nexport function checkAndFormatIfAndIfNoneMatch(configurationSetting, options) {\n    if (options.onlyIfChanged && options.onlyIfUnchanged) {\n        logger.error(\"onlyIfChanged and onlyIfUnchanged are both specified\", options.onlyIfChanged, options.onlyIfUnchanged);\n        throw new Error(\"onlyIfChanged and onlyIfUnchanged are mutually-exclusive\");\n    }\n    let ifMatch;\n    let ifNoneMatch;\n    if (options.onlyIfUnchanged) {\n        ifMatch = quoteETag(configurationSetting.etag);\n    }\n    if (options.onlyIfChanged) {\n        ifNoneMatch = quoteETag(configurationSetting.etag);\n    }\n    return {\n        ifMatch: ifMatch,\n        ifNoneMatch: ifNoneMatch,\n    };\n}\n/**\n * Transforms some of the key fields in ListConfigurationSettingsOptions and ListRevisionsOptions\n * so they can be added to a request using AppConfigurationGetKeyValuesOptionalParams.\n * - `options.acceptDateTime` is converted into an ISO string\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter and labelFilter are moved to key and label, respectively.\n *\n * @internal\n */\nexport function formatFiltersAndSelect(listConfigOptions) {\n    let acceptDatetime = undefined;\n    if (listConfigOptions.acceptDateTime) {\n        acceptDatetime = listConfigOptions.acceptDateTime.toISOString();\n    }\n    return {\n        key: listConfigOptions.keyFilter,\n        label: listConfigOptions.labelFilter,\n        acceptDatetime,\n        select: formatFieldsForSelect(listConfigOptions.fields),\n    };\n}\n/**\n * Handles translating a Date acceptDateTime into a string as needed by the API\n * @param newOptions - A newer style options with acceptDateTime as a date (and with proper casing!)\n * @internal\n */\nexport function formatAcceptDateTime(newOptions) {\n    return {\n        acceptDatetime: newOptions.acceptDateTime && newOptions.acceptDateTime.toISOString(),\n    };\n}\n/**\n * Take the URL that gets returned from next link and extract the 'after' token needed\n * to get the next page of results.\n * @internal\n */\nexport function extractAfterTokenFromNextLink(nextLink) {\n    const searchParams = new URLSearchParams(nextLink);\n    const afterToken = searchParams.get(\"after\");\n    if (afterToken == null || Array.isArray(afterToken)) {\n        logger.error(\"Invalid nextLink - invalid after token\", afterToken, Array.isArray(afterToken));\n        throw new Error(\"Invalid nextLink - invalid after token\");\n    }\n    return decodeURIComponent(afterToken);\n}\n/**\n * Makes a ConfigurationSetting-based response throw for all of the data members. Used primarily\n * to prevent possible errors by the user in accessing a model that is uninitialized. This can happen\n * in cases like HTTP status code 204 or 304, which return an empty response body.\n *\n * @param configurationSetting - The configuration setting to alter\n */\nexport function makeConfigurationSettingEmpty(configurationSetting) {\n    const names = [\n        \"contentType\",\n        \"etag\",\n        \"label\",\n        \"lastModified\",\n        \"isReadOnly\",\n        \"tags\",\n        \"value\",\n    ];\n    for (const name of names) {\n        configurationSetting[name] = undefined;\n    }\n}\n/**\n * @internal\n */\nexport function transformKeyValue(kvp) {\n    const setting = Object.assign(Object.assign({ value: undefined }, kvp), { isReadOnly: !!kvp.locked });\n    delete setting.locked;\n    return setting;\n}\n/**\n * @internal\n */\nfunction isConfigSettingWithSecretReferenceValue(setting) {\n    return (setting.contentType === secretReferenceContentType &&\n        isDefined(setting.value) &&\n        typeof setting.value !== \"string\");\n}\n/**\n * @internal\n */\nfunction isConfigSettingWithFeatureFlagValue(setting) {\n    return (setting.contentType === featureFlagContentType &&\n        isDefined(setting.value) &&\n        typeof setting.value !== \"string\");\n}\n/**\n * @internal\n */\nfunction isSimpleConfigSetting(setting) {\n    return typeof setting.value === \"string\" || !isDefined(setting.value);\n}\n/**\n * @internal\n */\nexport function serializeAsConfigurationSettingParam(setting) {\n    if (isSimpleConfigSetting(setting)) {\n        return setting;\n    }\n    try {\n        if (isConfigSettingWithFeatureFlagValue(setting)) {\n            return FeatureFlagHelper.toConfigurationSettingParam(setting);\n        }\n        if (isConfigSettingWithSecretReferenceValue(setting)) {\n            return SecretReferenceHelper.toConfigurationSettingParam(setting);\n        }\n    }\n    catch (error) {\n        return setting;\n    }\n    logger.error(\"Unable to serialize to a configuration setting\", setting);\n    throw new TypeError(`Unable to serialize the setting with key \"${setting.key}\" as a configuration setting`);\n}\n/**\n * @internal\n */\nexport function transformKeyValueResponseWithStatusCode(kvp, status) {\n    const response = Object.assign(Object.assign({}, transformKeyValue(kvp)), { statusCode: status !== null && status !== void 0 ? status : -1 });\n    if (hasUnderscoreResponse(kvp)) {\n        Object.defineProperty(response, \"_response\", {\n            enumerable: false,\n            value: kvp._response,\n        });\n    }\n    return response;\n}\n/**\n * @internal\n */\nexport function transformKeyValueResponse(kvp) {\n    const setting = transformKeyValue(kvp);\n    if (hasUnderscoreResponse(kvp)) {\n        Object.defineProperty(setting, \"_response\", {\n            enumerable: false,\n            value: kvp._response,\n        });\n    }\n    delete setting.eTag;\n    return setting;\n}\n/**\n * Translates user-facing field names into their `select` equivalents (these can be\n * seen in the `KnownEnum5`)\n *\n * @param fieldNames - fieldNames from users.\n * @returns The field names translated into the `select` field equivalents.\n *\n * @internal\n */\nexport function formatFieldsForSelect(fieldNames) {\n    if (fieldNames == null) {\n        return undefined;\n    }\n    const mappedFieldNames = fieldNames.map((fn) => {\n        switch (fn) {\n            case \"lastModified\":\n                return \"last_modified\";\n            case \"contentType\":\n                return \"content_type\";\n            case \"isReadOnly\":\n                return \"locked\";\n            default:\n                return fn;\n        }\n    });\n    return mappedFieldNames;\n}\n/**\n * @internal\n */\nexport function errorMessageForUnexpectedSetting(key, expectedType) {\n    return `Setting with key ${key} is not a valid ${expectedType}, make sure to have the correct content-type and a valid non-null value.`;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assertResponse(result) {\n    if (!hasUnderscoreResponse(result)) {\n        Object.defineProperty(result, \"_response\", {\n            enumerable: false,\n            value: \"Something went wrong, _response(raw response) is supposed to be part of the response. Please file a bug at https://github.com/Azure/azure-sdk-for-js\",\n        });\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasUnderscoreResponse(result) {\n    return Object.prototype.hasOwnProperty.call(result, \"_response\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}