{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n/**\n * Name of the {@link defaultRetryPolicy}\n */\n\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\n\nexport function defaultRetryPolicy(options = {}) {\n  var _a;\n\n  return {\n    name: defaultRetryPolicyName,\n    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n      maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT\n    }).sendRequest\n  };\n}","map":{"version":3,"names":["exponentialRetryStrategy","throttlingRetryStrategy","retryPolicy","DEFAULT_RETRY_POLICY_COUNT","defaultRetryPolicyName","defaultRetryPolicy","options","_a","name","sendRequest","maxRetries"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/defaultRetryPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,wBAAT,QAAyC,6CAAzC;AACA,SAASC,uBAAT,QAAwC,4CAAxC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,0BAAT,QAA2C,cAA3C;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,oBAA/B;AACP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,OAAO,GAAG,EAAtC,EAA0C;EAC7C,IAAIC,EAAJ;;EACA,OAAO;IACHC,IAAI,EAAEJ,sBADH;IAEHK,WAAW,EAAEP,WAAW,CAAC,CAACD,uBAAuB,EAAxB,EAA4BD,wBAAwB,CAACM,OAAD,CAApD,CAAD,EAAiE;MACrFI,UAAU,EAAE,CAACH,EAAE,GAAGD,OAAO,CAACI,UAAd,MAA8B,IAA9B,IAAsCH,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2DJ;IADc,CAAjE,CAAX,CAEVM;EAJA,CAAP;AAMH"},"metadata":{},"sourceType":"module"}