{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { computeSha256Hash, computeSha256Hmac } from \"@azure/core-util\";\nimport { logger } from \"./logger\";\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for AppConfig.\n */\n\nexport function appConfigKeyCredentialPolicy(credential, secret) {\n  return {\n    name: \"AppConfigKeyCredentialPolicy\",\n\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        const verb = request.method;\n        const utcNow = new Date().toUTCString();\n        logger.info(\"[appConfigKeyCredentialPolicy] Computing SHA-256 from the request body\");\n        const contentHash = yield computeSha256Hash(((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || \"\", \"base64\");\n        const signedHeaders = \"x-ms-date;host;x-ms-content-sha256\";\n        const url = new URL(request.url);\n        const query = url.search;\n        const urlPathAndQuery = query ? `${url.pathname}${query}` : url.pathname;\n        const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${url.host};${contentHash}`;\n        logger.info(\"[appConfigKeyCredentialPolicy] Computing a SHA-256 Hmac signature\");\n        const signature = yield computeSha256Hmac(secret, stringToSign, \"base64\");\n        request.headers.set(\"x-ms-date\", utcNow);\n        request.headers.set(\"x-ms-content-sha256\", contentHash); // Syntax for Authorization header\n        // Reference - https://docs.microsoft.com/en-us/azure/azure-app-configuration/rest-api-authentication-hmac#syntax\n\n        request.headers.set(\"Authorization\", `HMAC-SHA256 Credential=${credential}&SignedHeaders=${signedHeaders}&Signature=${signature}`);\n        return next(request);\n      })();\n    }\n\n  };\n}","map":{"version":3,"names":["computeSha256Hash","computeSha256Hmac","logger","appConfigKeyCredentialPolicy","credential","secret","name","sendRequest","request","next","_a","verb","method","utcNow","Date","toUTCString","info","contentHash","body","toString","signedHeaders","url","URL","query","search","urlPathAndQuery","pathname","stringToSign","host","signature","headers","set"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/app-configuration/dist-esm/src/appConfigCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { computeSha256Hash, computeSha256Hmac } from \"@azure/core-util\";\nimport { logger } from \"./logger\";\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for AppConfig.\n */\nexport function appConfigKeyCredentialPolicy(credential, secret) {\n    return {\n        name: \"AppConfigKeyCredentialPolicy\",\n        async sendRequest(request, next) {\n            var _a;\n            const verb = request.method;\n            const utcNow = new Date().toUTCString();\n            logger.info(\"[appConfigKeyCredentialPolicy] Computing SHA-256 from the request body\");\n            const contentHash = await computeSha256Hash(((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || \"\", \"base64\");\n            const signedHeaders = \"x-ms-date;host;x-ms-content-sha256\";\n            const url = new URL(request.url);\n            const query = url.search;\n            const urlPathAndQuery = query ? `${url.pathname}${query}` : url.pathname;\n            const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${url.host};${contentHash}`;\n            logger.info(\"[appConfigKeyCredentialPolicy] Computing a SHA-256 Hmac signature\");\n            const signature = await computeSha256Hmac(secret, stringToSign, \"base64\");\n            request.headers.set(\"x-ms-date\", utcNow);\n            request.headers.set(\"x-ms-content-sha256\", contentHash);\n            // Syntax for Authorization header\n            // Reference - https://docs.microsoft.com/en-us/azure/azure-app-configuration/rest-api-authentication-hmac#syntax\n            request.headers.set(\"Authorization\", `HMAC-SHA256 Credential=${credential}&SignedHeaders=${signedHeaders}&Signature=${signature}`);\n            return next(request);\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAqD,kBAArD;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,UAAtC,EAAkDC,MAAlD,EAA0D;EAC7D,OAAO;IACHC,IAAI,EAAE,8BADH;;IAEGC,WAAN,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;MAAA;QAC7B,IAAIC,EAAJ;;QACA,MAAMC,IAAI,GAAGH,OAAO,CAACI,MAArB;QACA,MAAMC,MAAM,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAf;QACAb,MAAM,CAACc,IAAP,CAAY,wEAAZ;QACA,MAAMC,WAAW,SAASjB,iBAAiB,CAAC,CAAC,CAACU,EAAE,GAAGF,OAAO,CAACU,IAAd,MAAwB,IAAxB,IAAgCR,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACS,QAAH,EAA1D,KAA4E,EAA7E,EAAiF,QAAjF,CAA3C;QACA,MAAMC,aAAa,GAAG,oCAAtB;QACA,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQd,OAAO,CAACa,GAAhB,CAAZ;QACA,MAAME,KAAK,GAAGF,GAAG,CAACG,MAAlB;QACA,MAAMC,eAAe,GAAGF,KAAK,GAAI,GAAEF,GAAG,CAACK,QAAS,GAAEH,KAAM,EAA3B,GAA+BF,GAAG,CAACK,QAAhE;QACA,MAAMC,YAAY,GAAI,GAAEhB,IAAK,KAAIc,eAAgB,KAAIZ,MAAO,IAAGQ,GAAG,CAACO,IAAK,IAAGX,WAAY,EAAvF;QACAf,MAAM,CAACc,IAAP,CAAY,mEAAZ;QACA,MAAMa,SAAS,SAAS5B,iBAAiB,CAACI,MAAD,EAASsB,YAAT,EAAuB,QAAvB,CAAzC;QACAnB,OAAO,CAACsB,OAAR,CAAgBC,GAAhB,CAAoB,WAApB,EAAiClB,MAAjC;QACAL,OAAO,CAACsB,OAAR,CAAgBC,GAAhB,CAAoB,qBAApB,EAA2Cd,WAA3C,EAd6B,CAe7B;QACA;;QACAT,OAAO,CAACsB,OAAR,CAAgBC,GAAhB,CAAoB,eAApB,EAAsC,0BAAyB3B,UAAW,kBAAiBgB,aAAc,cAAaS,SAAU,EAAhI;QACA,OAAOpB,IAAI,CAACD,OAAD,CAAX;MAlB6B;IAmBhC;;EArBE,CAAP;AAuBH"},"metadata":{},"sourceType":"module"}