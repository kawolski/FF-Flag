{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\n\nexport function isError(e) {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n\n  return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\n\nexport function getErrorMessage(e) {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified;\n\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err) {\n      stringified = \"[unable to stringify input]\";\n    }\n\n    return `Unknown error ${stringified}`;\n  }\n}","map":{"version":3,"names":["isObject","isError","e","hasName","name","hasMessage","message","getErrorMessage","stringified","JSON","stringify","String","err"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-util/dist-esm/src/error.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n    if (isObject(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,UAAzB;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAAoB;EACvB,IAAIF,QAAQ,CAACE,CAAD,CAAZ,EAAiB;IACb,MAAMC,OAAO,GAAG,OAAOD,CAAC,CAACE,IAAT,KAAkB,QAAlC;IACA,MAAMC,UAAU,GAAG,OAAOH,CAAC,CAACI,OAAT,KAAqB,QAAxC;IACA,OAAOH,OAAO,IAAIE,UAAlB;EACH;;EACD,OAAO,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,eAAT,CAAyBL,CAAzB,EAA4B;EAC/B,IAAID,OAAO,CAACC,CAAD,CAAX,EAAgB;IACZ,OAAOA,CAAC,CAACI,OAAT;EACH,CAFD,MAGK;IACD,IAAIE,WAAJ;;IACA,IAAI;MACA,IAAI,OAAON,CAAP,KAAa,QAAb,IAAyBA,CAA7B,EAAgC;QAC5BM,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeR,CAAf,CAAd;MACH,CAFD,MAGK;QACDM,WAAW,GAAGG,MAAM,CAACT,CAAD,CAApB;MACH;IACJ,CAPD,CAQA,OAAOU,GAAP,EAAY;MACRJ,WAAW,GAAG,6BAAd;IACH;;IACD,OAAQ,iBAAgBA,WAAY,EAApC;EACH;AACJ"},"metadata":{},"sourceType":"module"}