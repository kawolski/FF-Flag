{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content) {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\n\nexport function bufferToBase64(buffer) {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n\n  return btoa(binary);\n}","map":{"version":3,"names":["base64ToBytes","content","atob","Error","binary","bytes","Uint8Array","length","i","charCodeAt","bufferToBase64","buffer","btoa","byte","String","fromCharCode"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-util/dist-esm/src/base64.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content) {\n    if (typeof atob !== \"function\") {\n        throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n    }\n    const binary = atob(content);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer) {\n    if (typeof btoa !== \"function\") {\n        throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n    }\n    const bytes = new Uint8Array(buffer);\n    let binary = \"\";\n    for (const byte of bytes) {\n        binary += String.fromCharCode(byte);\n    }\n    return btoa(binary);\n}\n"],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;EACnC,IAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;IAC5B,MAAM,IAAIC,KAAJ,CAAW,iEAAX,CAAN;EACH;;EACD,MAAMC,MAAM,GAAGF,IAAI,CAACD,OAAD,CAAnB;EACA,MAAMI,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAM,CAACG,MAAtB,CAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;IACpCH,KAAK,CAACG,CAAD,CAAL,GAAWJ,MAAM,CAACK,UAAP,CAAkBD,CAAlB,CAAX;EACH;;EACD,OAAOH,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,cAAT,CAAwBC,MAAxB,EAAgC;EACnC,IAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;IAC5B,MAAM,IAAIT,KAAJ,CAAW,iEAAX,CAAN;EACH;;EACD,MAAME,KAAK,GAAG,IAAIC,UAAJ,CAAeK,MAAf,CAAd;EACA,IAAIP,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMS,IAAX,IAAmBR,KAAnB,EAA0B;IACtBD,MAAM,IAAIU,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAV;EACH;;EACD,OAAOD,IAAI,CAACR,MAAD,CAAX;AACH"},"metadata":{},"sourceType":"module"}