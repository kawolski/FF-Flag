{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\"; // Default options for the cycler if none are provided\n\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\n\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < refreshTimeout) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken(); // Timeout is up, so throw if it's still null\n\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    let token = yield tryGetAccessToken();\n\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\n\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  let tenantId;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(scopes, getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        tenantId = getTokenOptions.tenantId;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        tenantId = undefined;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (scopes, tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      // If the tenantId passed in token options is different to the one we have\n      // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n      // refresh the token with the new tenantId or token.\n      const mustRefresh = tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n      if (mustRefresh) return refresh(scopes, tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(scopes, tokenOptions);\n      }\n\n      return token;\n    });\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","refreshTimeout","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","tokenCyclerOptions","refreshWorker","tenantId","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getToken","then","_token","catch","reason","undefined","tokenOptions","Boolean","claims"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/util/tokenCycler.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n        if (mustRefresh)\n            return refresh(scopes, tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}