{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n  let parameterPath = parameter.parameterPath;\n  const parameterMapper = parameter.mapper;\n  let value;\n\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n\n        let useDefaultValue = false;\n\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n        }\n\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n      const propertyPath = parameterPath[propertyName];\n      const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n        parameterPath: propertyPath,\n        mapper: propertyMapper\n      }, fallbackObject);\n\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n  const result = {\n    propertyFound: false\n  };\n  let i = 0;\n\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart = parameterPath[i]; // Make sure to check inherited properties too, so don't use hasOwnProperty().\n\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n\n  return result;\n}\n\nconst operationRequestMap = new WeakMap();\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\n\nfunction hasOriginalRequest(request) {\n  return originalRequestSymbol in request;\n}\n\nexport function getOperationRequestInfo(request) {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n\n  let info = operationRequestMap.get(request);\n\n  if (!info) {\n    info = {};\n    operationRequestMap.set(request, info);\n  }\n\n  return info;\n}","map":{"version":3,"names":["getOperationArgumentValueFromParameter","operationArguments","parameter","fallbackObject","parameterPath","parameterMapper","mapper","value","Array","isArray","length","isConstant","defaultValue","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","required","propertyValue","propertyName","propertyMapper","type","modelProperties","propertyPath","undefined","parent","result","i","parameterPathPart","operationRequestMap","WeakMap","originalRequestSymbol","Symbol","for","hasOriginalRequest","request","getOperationRequestInfo","info","get","set"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-client/dist-esm/src/operationHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst operationRequestMap = new WeakMap();\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        operationRequestMap.set(request, info);\n    }\n    return info;\n}\n"],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,sCAAT,CAAgDC,kBAAhD,EAAoEC,SAApE,EAA+EC,cAA/E,EAA+F;EAClG,IAAIC,aAAa,GAAGF,SAAS,CAACE,aAA9B;EACA,MAAMC,eAAe,GAAGH,SAAS,CAACI,MAAlC;EACA,IAAIC,KAAJ;;EACA,IAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;IACnCA,aAAa,GAAG,CAACA,aAAD,CAAhB;EACH;;EACD,IAAII,KAAK,CAACC,OAAN,CAAcL,aAAd,CAAJ,EAAkC;IAC9B,IAAIA,aAAa,CAACM,MAAd,GAAuB,CAA3B,EAA8B;MAC1B,IAAIL,eAAe,CAACM,UAApB,EAAgC;QAC5BJ,KAAK,GAAGF,eAAe,CAACO,YAAxB;MACH,CAFD,MAGK;QACD,IAAIC,oBAAoB,GAAGC,4BAA4B,CAACb,kBAAD,EAAqBG,aAArB,CAAvD;;QACA,IAAI,CAACS,oBAAoB,CAACE,aAAtB,IAAuCZ,cAA3C,EAA2D;UACvDU,oBAAoB,GAAGC,4BAA4B,CAACX,cAAD,EAAiBC,aAAjB,CAAnD;QACH;;QACD,IAAIY,eAAe,GAAG,KAAtB;;QACA,IAAI,CAACH,oBAAoB,CAACE,aAA1B,EAAyC;UACrCC,eAAe,GACXX,eAAe,CAACY,QAAhB,IACKb,aAAa,CAAC,CAAD,CAAb,KAAqB,SAArB,IAAkCA,aAAa,CAACM,MAAd,KAAyB,CAFpE;QAGH;;QACDH,KAAK,GAAGS,eAAe,GAAGX,eAAe,CAACO,YAAnB,GAAkCC,oBAAoB,CAACK,aAA9E;MACH;IACJ;EACJ,CAnBD,MAoBK;IACD,IAAIb,eAAe,CAACY,QAApB,EAA8B;MAC1BV,KAAK,GAAG,EAAR;IACH;;IACD,KAAK,MAAMY,YAAX,IAA2Bf,aAA3B,EAA0C;MACtC,MAAMgB,cAAc,GAAGf,eAAe,CAACgB,IAAhB,CAAqBC,eAArB,CAAqCH,YAArC,CAAvB;MACA,MAAMI,YAAY,GAAGnB,aAAa,CAACe,YAAD,CAAlC;MACA,MAAMD,aAAa,GAAGlB,sCAAsC,CAACC,kBAAD,EAAqB;QAC7EG,aAAa,EAAEmB,YAD8D;QAE7EjB,MAAM,EAAEc;MAFqE,CAArB,EAGzDjB,cAHyD,CAA5D;;MAIA,IAAIe,aAAa,KAAKM,SAAtB,EAAiC;QAC7B,IAAI,CAACjB,KAAL,EAAY;UACRA,KAAK,GAAG,EAAR;QACH;;QACDA,KAAK,CAACY,YAAD,CAAL,GAAsBD,aAAtB;MACH;IACJ;EACJ;;EACD,OAAOX,KAAP;AACH;;AACD,SAASO,4BAAT,CAAsCW,MAAtC,EAA8CrB,aAA9C,EAA6D;EACzD,MAAMsB,MAAM,GAAG;IAAEX,aAAa,EAAE;EAAjB,CAAf;EACA,IAAIY,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGvB,aAAa,CAACM,MAAzB,EAAiC,EAAEiB,CAAnC,EAAsC;IAClC,MAAMC,iBAAiB,GAAGxB,aAAa,CAACuB,CAAD,CAAvC,CADkC,CAElC;;IACA,IAAIF,MAAM,IAAIG,iBAAiB,IAAIH,MAAnC,EAA2C;MACvCA,MAAM,GAAGA,MAAM,CAACG,iBAAD,CAAf;IACH,CAFD,MAGK;MACD;IACH;EACJ;;EACD,IAAID,CAAC,KAAKvB,aAAa,CAACM,MAAxB,EAAgC;IAC5BgB,MAAM,CAACR,aAAP,GAAuBO,MAAvB;IACAC,MAAM,CAACX,aAAP,GAAuB,IAAvB;EACH;;EACD,OAAOW,MAAP;AACH;;AACD,MAAMG,mBAAmB,GAAG,IAAIC,OAAJ,EAA5B;AACA,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,GAAP,CAAW,qCAAX,CAA9B;;AACA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;EACjC,OAAOJ,qBAAqB,IAAII,OAAhC;AACH;;AACD,OAAO,SAASC,uBAAT,CAAiCD,OAAjC,EAA0C;EAC7C,IAAID,kBAAkB,CAACC,OAAD,CAAtB,EAAiC;IAC7B,OAAOC,uBAAuB,CAACD,OAAO,CAACJ,qBAAD,CAAR,CAA9B;EACH;;EACD,IAAIM,IAAI,GAAGR,mBAAmB,CAACS,GAApB,CAAwBH,OAAxB,CAAX;;EACA,IAAI,CAACE,IAAL,EAAW;IACPA,IAAI,GAAG,EAAP;IACAR,mBAAmB,CAACU,GAApB,CAAwBJ,OAAxB,EAAiCE,IAAjC;EACH;;EACD,OAAOA,IAAP;AACH"},"metadata":{},"sourceType":"module"}