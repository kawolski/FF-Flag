{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger } from \"./logger\";\n/**\n * The prefix for feature flags.\n */\n\nexport const featureFlagPrefix = \".appconfig.featureflag/\";\n/**\n * The content type for a FeatureFlag\n */\n\nexport const featureFlagContentType = \"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\";\n/**\n * @internal\n */\n\nexport const FeatureFlagHelper = {\n  /**\n   * Takes the FeatureFlag (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: featureFlag => {\n    var _a;\n\n    logger.info(\"Encoding FeatureFlag value in a ConfigurationSetting:\", featureFlag);\n\n    if (!featureFlag.value) {\n      logger.error(\"FeatureFlag has an unexpected value\", featureFlag);\n      throw new TypeError(`FeatureFlag has an unexpected value - ${featureFlag.value}`);\n    }\n\n    let key = featureFlag.key;\n\n    if (typeof featureFlag.key === \"string\" && !featureFlag.key.startsWith(featureFlagPrefix)) {\n      key = featureFlagPrefix + featureFlag.key;\n    }\n\n    const jsonFeatureFlagValue = {\n      id: (_a = featureFlag.value.id) !== null && _a !== void 0 ? _a : key.replace(featureFlagPrefix, \"\"),\n      enabled: featureFlag.value.enabled,\n      description: featureFlag.value.description,\n      conditions: {\n        client_filters: featureFlag.value.conditions.clientFilters\n      },\n      display_name: featureFlag.value.displayName\n    };\n    const configSetting = Object.assign(Object.assign({}, featureFlag), {\n      key,\n      value: JSON.stringify(jsonFeatureFlagValue)\n    });\n    return configSetting;\n  }\n};\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<FeatureFlagValue> by parsing the value string.\n */\n\nexport function parseFeatureFlag(setting) {\n  logger.info(\"Parsing the value to return the FeatureFlagValue\", setting);\n\n  if (!isFeatureFlag(setting)) {\n    logger.error(\"Invalid FeatureFlag input\", setting);\n    throw TypeError(`Setting with key ${setting.key} is not a valid FeatureFlag, make sure to have the correct content-type and a valid non-null value.`);\n  }\n\n  const jsonFeatureFlagValue = JSON.parse(setting.value);\n  let key = setting.key;\n\n  if (typeof setting.key === \"string\" && !setting.key.startsWith(featureFlagPrefix)) {\n    key = featureFlagPrefix + setting.key;\n  }\n\n  const featureflag = Object.assign(Object.assign({}, setting), {\n    value: {\n      id: jsonFeatureFlagValue.id,\n      enabled: jsonFeatureFlagValue.enabled,\n      description: jsonFeatureFlagValue.description,\n      displayName: jsonFeatureFlagValue.display_name,\n      conditions: {\n        clientFilters: jsonFeatureFlagValue.conditions.client_filters\n      }\n    },\n    key,\n    contentType: featureFlagContentType\n  });\n  return featureflag;\n}\n/**\n * Lets you know if the ConfigurationSetting is a feature flag.\n *\n * [Checks if the content type is featureFlagContentType `\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\"`]\n */\n\nexport function isFeatureFlag(setting) {\n  return setting && setting.contentType === featureFlagContentType && typeof setting.value === \"string\";\n}","map":{"version":3,"names":["logger","featureFlagPrefix","featureFlagContentType","FeatureFlagHelper","toConfigurationSettingParam","featureFlag","_a","info","value","error","TypeError","key","startsWith","jsonFeatureFlagValue","id","replace","enabled","description","conditions","client_filters","clientFilters","display_name","displayName","configSetting","Object","assign","JSON","stringify","parseFeatureFlag","setting","isFeatureFlag","parse","featureflag","contentType"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/app-configuration/dist-esm/src/featureFlag.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger } from \"./logger\";\n/**\n * The prefix for feature flags.\n */\nexport const featureFlagPrefix = \".appconfig.featureflag/\";\n/**\n * The content type for a FeatureFlag\n */\nexport const featureFlagContentType = \"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\";\n/**\n * @internal\n */\nexport const FeatureFlagHelper = {\n    /**\n     * Takes the FeatureFlag (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n     */\n    toConfigurationSettingParam: (featureFlag) => {\n        var _a;\n        logger.info(\"Encoding FeatureFlag value in a ConfigurationSetting:\", featureFlag);\n        if (!featureFlag.value) {\n            logger.error(\"FeatureFlag has an unexpected value\", featureFlag);\n            throw new TypeError(`FeatureFlag has an unexpected value - ${featureFlag.value}`);\n        }\n        let key = featureFlag.key;\n        if (typeof featureFlag.key === \"string\" && !featureFlag.key.startsWith(featureFlagPrefix)) {\n            key = featureFlagPrefix + featureFlag.key;\n        }\n        const jsonFeatureFlagValue = {\n            id: (_a = featureFlag.value.id) !== null && _a !== void 0 ? _a : key.replace(featureFlagPrefix, \"\"),\n            enabled: featureFlag.value.enabled,\n            description: featureFlag.value.description,\n            conditions: {\n                client_filters: featureFlag.value.conditions.clientFilters,\n            },\n            display_name: featureFlag.value.displayName,\n        };\n        const configSetting = Object.assign(Object.assign({}, featureFlag), { key, value: JSON.stringify(jsonFeatureFlagValue) });\n        return configSetting;\n    },\n};\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<FeatureFlagValue> by parsing the value string.\n */\nexport function parseFeatureFlag(setting) {\n    logger.info(\"Parsing the value to return the FeatureFlagValue\", setting);\n    if (!isFeatureFlag(setting)) {\n        logger.error(\"Invalid FeatureFlag input\", setting);\n        throw TypeError(`Setting with key ${setting.key} is not a valid FeatureFlag, make sure to have the correct content-type and a valid non-null value.`);\n    }\n    const jsonFeatureFlagValue = JSON.parse(setting.value);\n    let key = setting.key;\n    if (typeof setting.key === \"string\" && !setting.key.startsWith(featureFlagPrefix)) {\n        key = featureFlagPrefix + setting.key;\n    }\n    const featureflag = Object.assign(Object.assign({}, setting), { value: {\n            id: jsonFeatureFlagValue.id,\n            enabled: jsonFeatureFlagValue.enabled,\n            description: jsonFeatureFlagValue.description,\n            displayName: jsonFeatureFlagValue.display_name,\n            conditions: { clientFilters: jsonFeatureFlagValue.conditions.client_filters },\n        }, key, contentType: featureFlagContentType });\n    return featureflag;\n}\n/**\n * Lets you know if the ConfigurationSetting is a feature flag.\n *\n * [Checks if the content type is featureFlagContentType `\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\"`]\n */\nexport function isFeatureFlag(setting) {\n    return (setting && setting.contentType === featureFlagContentType && typeof setting.value === \"string\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}