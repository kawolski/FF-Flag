{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nconst debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj = Object.assign(namespace => {\n  return createDebugger(namespace);\n}, {\n  enable,\n  enabled,\n  disable,\n  log\n});\n\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map(ns => ns.trim().replace(wildcard, \".*?\"));\n\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction disable() {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace) {\n  const newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  function debug(...args) {\n    if (!newDebugger.enabled) {\n      return;\n    }\n\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\n\nfunction destroy() {\n  const index = debuggers.indexOf(this);\n\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(namespace) {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;","map":{"version":3,"names":["log","debugEnvVariable","process","env","DEBUG","undefined","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","Object","assign","namespace","createDebugger","enabled","disable","namespaces","wildcard","namespaceList","split","map","ns","trim","replace","startsWith","push","RegExp","substr","instance","endsWith","skipped","test","enabledNamespace","result","newDebugger","debug","destroy","extend","args","length","index","indexOf","splice"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/logger/dist-esm/src/debug.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nexport default debugObj;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}