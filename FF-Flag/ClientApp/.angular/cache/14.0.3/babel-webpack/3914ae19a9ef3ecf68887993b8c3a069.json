{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { deserializationPolicy } from \"./deserializationPolicy\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\n\nexport function createClientPipeline(options = {}) {\n  const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n\n  if (options.credentialOptions) {\n    pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n      credential: options.credentialOptions.credential,\n      scopes: options.credentialOptions.credentialScopes\n    }));\n  }\n\n  pipeline.addPolicy(serializationPolicy(options.serializationOptions), {\n    phase: \"Serialize\"\n  });\n  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n    phase: \"Deserialize\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["deserializationPolicy","bearerTokenAuthenticationPolicy","createPipelineFromOptions","serializationPolicy","createClientPipeline","options","pipeline","credentialOptions","addPolicy","credential","scopes","credentialScopes","serializationOptions","phase","deserializationOptions"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-client/dist-esm/src/pipeline.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { deserializationPolicy } from \"./deserializationPolicy\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions, } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options = {}) {\n    const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,qBAAT,QAAsC,yBAAtC;AACA,SAASC,+BAAT,EAA0CC,yBAA1C,QAA4E,2BAA5E;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,OAAO,GAAG,EAAxC,EAA4C;EAC/C,MAAMC,QAAQ,GAAGJ,yBAAyB,CAACG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAApD,CAA1C;;EACA,IAAIA,OAAO,CAACE,iBAAZ,EAA+B;IAC3BD,QAAQ,CAACE,SAAT,CAAmBP,+BAA+B,CAAC;MAC/CQ,UAAU,EAAEJ,OAAO,CAACE,iBAAR,CAA0BE,UADS;MAE/CC,MAAM,EAAEL,OAAO,CAACE,iBAAR,CAA0BI;IAFa,CAAD,CAAlD;EAIH;;EACDL,QAAQ,CAACE,SAAT,CAAmBL,mBAAmB,CAACE,OAAO,CAACO,oBAAT,CAAtC,EAAsE;IAAEC,KAAK,EAAE;EAAT,CAAtE;EACAP,QAAQ,CAACE,SAAT,CAAmBR,qBAAqB,CAACK,OAAO,CAACS,sBAAT,CAAxC,EAA0E;IACtED,KAAK,EAAE;EAD+D,CAA1E;EAGA,OAAOP,QAAP;AACH"},"metadata":{},"sourceType":"module"}