{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext\";\nexport function createDefaultTracingSpan() {\n  return {\n    end: () => {// noop\n    },\n    isRecording: () => false,\n    recordException: () => {// noop\n    },\n    setAttribute: () => {// noop\n    },\n    setStatus: () => {// noop\n    }\n  };\n}\nexport function createDefaultInstrumenter() {\n  return {\n    createRequestHeaders: () => {\n      return {};\n    },\n    parseTraceparentHeader: () => {\n      return undefined;\n    },\n    startSpan: (_name, spanOptions) => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({\n          parentContext: spanOptions.tracingContext\n        })\n      };\n    },\n\n    withContext(_context, callback, ...callbackArgs) {\n      return callback(...callbackArgs);\n    }\n\n  };\n}\n/** @internal */\n\nlet instrumenterImplementation;\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\n\nexport function useInstrumenter(instrumenter) {\n  instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\n\nexport function getInstrumenter() {\n  if (!instrumenterImplementation) {\n    instrumenterImplementation = createDefaultInstrumenter();\n  }\n\n  return instrumenterImplementation;\n}","map":{"version":3,"names":["createTracingContext","createDefaultTracingSpan","end","isRecording","recordException","setAttribute","setStatus","createDefaultInstrumenter","createRequestHeaders","parseTraceparentHeader","undefined","startSpan","_name","spanOptions","span","tracingContext","parentContext","withContext","_context","callback","callbackArgs","instrumenterImplementation","useInstrumenter","instrumenter","getInstrumenter"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-tracing/dist-esm/src/instrumenter.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext\";\nexport function createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n    };\n}\nexport function createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/** @internal */\nlet instrumenterImplementation;\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n    instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n    if (!instrumenterImplementation) {\n        instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return instrumenterImplementation;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,oBAAT,QAAqC,kBAArC;AACA,OAAO,SAASC,wBAAT,GAAoC;EACvC,OAAO;IACHC,GAAG,EAAE,MAAM,CACP;IACH,CAHE;IAIHC,WAAW,EAAE,MAAM,KAJhB;IAKHC,eAAe,EAAE,MAAM,CACnB;IACH,CAPE;IAQHC,YAAY,EAAE,MAAM,CAChB;IACH,CAVE;IAWHC,SAAS,EAAE,MAAM,CACb;IACH;EAbE,CAAP;AAeH;AACD,OAAO,SAASC,yBAAT,GAAqC;EACxC,OAAO;IACHC,oBAAoB,EAAE,MAAM;MACxB,OAAO,EAAP;IACH,CAHE;IAIHC,sBAAsB,EAAE,MAAM;MAC1B,OAAOC,SAAP;IACH,CANE;IAOHC,SAAS,EAAE,CAACC,KAAD,EAAQC,WAAR,KAAwB;MAC/B,OAAO;QACHC,IAAI,EAAEb,wBAAwB,EAD3B;QAEHc,cAAc,EAAEf,oBAAoB,CAAC;UAAEgB,aAAa,EAAEH,WAAW,CAACE;QAA7B,CAAD;MAFjC,CAAP;IAIH,CAZE;;IAaHE,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB,GAAGC,YAAxB,EAAsC;MAC7C,OAAOD,QAAQ,CAAC,GAAGC,YAAJ,CAAf;IACH;;EAfE,CAAP;AAiBH;AACD;;AACA,IAAIC,0BAAJ;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,YAAzB,EAAuC;EAC1CF,0BAA0B,GAAGE,YAA7B;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,GAA2B;EAC9B,IAAI,CAACH,0BAAL,EAAiC;IAC7BA,0BAA0B,GAAGd,yBAAyB,EAAtD;EACH;;EACD,OAAOc,0BAAP;AACH"},"metadata":{},"sourceType":"module"}