{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\n\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\n\nexport function redirectPolicy(options = {}) {\n  const {\n    maxRetries = 20\n  } = options;\n  return {\n    name: redirectPolicyName,\n\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        const response = yield next(request);\n        return handleRedirect(next, response, maxRetries);\n      })();\n    }\n\n  };\n}\n\nfunction handleRedirect(_x, _x2, _x3) {\n  return _handleRedirect.apply(this, arguments);\n}\n\nfunction _handleRedirect() {\n  _handleRedirect = _asyncToGenerator(function* (next, response, maxRetries, currentRetries = 0) {\n    const {\n      request,\n      status,\n      headers\n    } = response;\n    const locationHeader = headers.get(\"location\");\n\n    if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && currentRetries < maxRetries) {\n      const url = new URL(locationHeader, request.url);\n      request.url = url.toString(); // POST request with Status code 303 should be converted into a\n      // redirected GET request if the redirect url is present in the location header\n\n      if (status === 303) {\n        request.method = \"GET\";\n        request.headers.delete(\"Content-Length\");\n        delete request.body;\n      }\n\n      request.headers.delete(\"Authorization\");\n      const res = yield next(request);\n      return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n\n    return response;\n  });\n  return _handleRedirect.apply(this, arguments);\n}","map":{"version":3,"names":["redirectPolicyName","allowedRedirect","redirectPolicy","options","maxRetries","name","sendRequest","request","next","response","handleRedirect","currentRetries","status","headers","locationHeader","get","includes","method","url","URL","toString","delete","body","res"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/redirectPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n"],"mappings":";AAAA;AACA;;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAG,gBAA3B;AACP;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC,KAAD,EAAQ,MAAR,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAO,GAAG,EAAlC,EAAsC;EACzC,MAAM;IAAEC,UAAU,GAAG;EAAf,IAAsBD,OAA5B;EACA,OAAO;IACHE,IAAI,EAAEL,kBADH;;IAEGM,WAAN,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;MAAA;QAC7B,MAAMC,QAAQ,SAASD,IAAI,CAACD,OAAD,CAA3B;QACA,OAAOG,cAAc,CAACF,IAAD,EAAOC,QAAP,EAAiBL,UAAjB,CAArB;MAF6B;IAGhC;;EALE,CAAP;AAOH;;SACcM,c;;;;;sCAAf,WAA8BF,IAA9B,EAAoCC,QAApC,EAA8CL,UAA9C,EAA0DO,cAAc,GAAG,CAA3E,EAA8E;IAC1E,MAAM;MAAEJ,OAAF;MAAWK,MAAX;MAAmBC;IAAnB,IAA+BJ,QAArC;IACA,MAAMK,cAAc,GAAGD,OAAO,CAACE,GAAR,CAAY,UAAZ,CAAvB;;IACA,IAAID,cAAc,KACbF,MAAM,KAAK,GAAX,IACIA,MAAM,KAAK,GAAX,IAAkBX,eAAe,CAACe,QAAhB,CAAyBT,OAAO,CAACU,MAAjC,CADtB,IAEIL,MAAM,KAAK,GAAX,IAAkBX,eAAe,CAACe,QAAhB,CAAyBT,OAAO,CAACU,MAAjC,CAFtB,IAGIL,MAAM,KAAK,GAAX,IAAkBL,OAAO,CAACU,MAAR,KAAmB,MAHzC,IAIGL,MAAM,KAAK,GALD,CAAd,IAMAD,cAAc,GAAGP,UANrB,EAMiC;MAC7B,MAAMc,GAAG,GAAG,IAAIC,GAAJ,CAAQL,cAAR,EAAwBP,OAAO,CAACW,GAAhC,CAAZ;MACAX,OAAO,CAACW,GAAR,GAAcA,GAAG,CAACE,QAAJ,EAAd,CAF6B,CAG7B;MACA;;MACA,IAAIR,MAAM,KAAK,GAAf,EAAoB;QAChBL,OAAO,CAACU,MAAR,GAAiB,KAAjB;QACAV,OAAO,CAACM,OAAR,CAAgBQ,MAAhB,CAAuB,gBAAvB;QACA,OAAOd,OAAO,CAACe,IAAf;MACH;;MACDf,OAAO,CAACM,OAAR,CAAgBQ,MAAhB,CAAuB,eAAvB;MACA,MAAME,GAAG,SAASf,IAAI,CAACD,OAAD,CAAtB;MACA,OAAOG,cAAc,CAACF,IAAD,EAAOe,GAAP,EAAYnB,UAAZ,EAAwBO,cAAc,GAAG,CAAzC,CAArB;IACH;;IACD,OAAOF,QAAP;EACH,C"},"metadata":{},"sourceType":"module"}