{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger } from \"./logger\";\n/**\n * content-type for the secret reference.\n */\n\nexport const secretReferenceContentType = \"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\";\n/**\n * @internal\n */\n\nexport const SecretReferenceHelper = {\n  /**\n   * Takes the SecretReference (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: secretReference => {\n    logger.info(\"Encoding SecretReference value in a ConfigurationSetting:\", secretReference);\n\n    if (!secretReference.value) {\n      logger.error(`SecretReference has an unexpected value`, secretReference);\n      throw new TypeError(`SecretReference has an unexpected value - ${secretReference.value}`);\n    }\n\n    const jsonSecretReferenceValue = {\n      uri: secretReference.value.secretId\n    };\n    const configSetting = Object.assign(Object.assign({}, secretReference), {\n      value: JSON.stringify(jsonSecretReferenceValue)\n    });\n    return configSetting;\n  }\n};\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<SecretReferenceValue> by parsing the value string.\n */\n\nexport function parseSecretReference(setting) {\n  logger.info(\"[parseSecretReference] Parsing the value to return the SecretReferenceValue\", setting);\n\n  if (!isSecretReference(setting)) {\n    logger.error(\"Invalid SecretReference input\", setting);\n    throw TypeError(`Setting with key ${setting.key} is not a valid SecretReference, make sure to have the correct content-type and a valid non-null value.`);\n  }\n\n  const jsonSecretReferenceValue = JSON.parse(setting.value);\n  const secretReference = Object.assign(Object.assign({}, setting), {\n    value: {\n      secretId: jsonSecretReferenceValue.uri\n    }\n  });\n  return secretReference;\n}\n/**\n * Lets you know if the ConfigurationSetting is a secret reference.\n *\n * [Checks if the content type is secretReferenceContentType `\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\"`]\n */\n\nexport function isSecretReference(setting) {\n  return setting && setting.contentType === secretReferenceContentType && typeof setting.value === \"string\";\n}","map":{"version":3,"names":["logger","secretReferenceContentType","SecretReferenceHelper","toConfigurationSettingParam","secretReference","info","value","error","TypeError","jsonSecretReferenceValue","uri","secretId","configSetting","Object","assign","JSON","stringify","parseSecretReference","setting","isSecretReference","key","parse","contentType"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/app-configuration/dist-esm/src/secretReference.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger } from \"./logger\";\n/**\n * content-type for the secret reference.\n */\nexport const secretReferenceContentType = \"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\";\n/**\n * @internal\n */\nexport const SecretReferenceHelper = {\n    /**\n     * Takes the SecretReference (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n     */\n    toConfigurationSettingParam: (secretReference) => {\n        logger.info(\"Encoding SecretReference value in a ConfigurationSetting:\", secretReference);\n        if (!secretReference.value) {\n            logger.error(`SecretReference has an unexpected value`, secretReference);\n            throw new TypeError(`SecretReference has an unexpected value - ${secretReference.value}`);\n        }\n        const jsonSecretReferenceValue = {\n            uri: secretReference.value.secretId,\n        };\n        const configSetting = Object.assign(Object.assign({}, secretReference), { value: JSON.stringify(jsonSecretReferenceValue) });\n        return configSetting;\n    },\n};\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<SecretReferenceValue> by parsing the value string.\n */\nexport function parseSecretReference(setting) {\n    logger.info(\"[parseSecretReference] Parsing the value to return the SecretReferenceValue\", setting);\n    if (!isSecretReference(setting)) {\n        logger.error(\"Invalid SecretReference input\", setting);\n        throw TypeError(`Setting with key ${setting.key} is not a valid SecretReference, make sure to have the correct content-type and a valid non-null value.`);\n    }\n    const jsonSecretReferenceValue = JSON.parse(setting.value);\n    const secretReference = Object.assign(Object.assign({}, setting), { value: { secretId: jsonSecretReferenceValue.uri } });\n    return secretReference;\n}\n/**\n * Lets you know if the ConfigurationSetting is a secret reference.\n *\n * [Checks if the content type is secretReferenceContentType `\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\"`]\n */\nexport function isSecretReference(setting) {\n    return (setting &&\n        setting.contentType === secretReferenceContentType &&\n        typeof setting.value === \"string\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,UAAvB;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,oEAAnC;AACP;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG;EACjC;AACJ;AACA;EACIC,2BAA2B,EAAGC,eAAD,IAAqB;IAC9CJ,MAAM,CAACK,IAAP,CAAY,2DAAZ,EAAyED,eAAzE;;IACA,IAAI,CAACA,eAAe,CAACE,KAArB,EAA4B;MACxBN,MAAM,CAACO,KAAP,CAAc,yCAAd,EAAwDH,eAAxD;MACA,MAAM,IAAII,SAAJ,CAAe,6CAA4CJ,eAAe,CAACE,KAAM,EAAjF,CAAN;IACH;;IACD,MAAMG,wBAAwB,GAAG;MAC7BC,GAAG,EAAEN,eAAe,CAACE,KAAhB,CAAsBK;IADE,CAAjC;IAGA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,eAAlB,CAAd,EAAkD;MAAEE,KAAK,EAAES,IAAI,CAACC,SAAL,CAAeP,wBAAf;IAAT,CAAlD,CAAtB;IACA,OAAOG,aAAP;EACH;AAfgC,CAA9B;AAiBP;AACA;AACA;;AACA,OAAO,SAASK,oBAAT,CAA8BC,OAA9B,EAAuC;EAC1ClB,MAAM,CAACK,IAAP,CAAY,6EAAZ,EAA2Fa,OAA3F;;EACA,IAAI,CAACC,iBAAiB,CAACD,OAAD,CAAtB,EAAiC;IAC7BlB,MAAM,CAACO,KAAP,CAAa,+BAAb,EAA8CW,OAA9C;IACA,MAAMV,SAAS,CAAE,oBAAmBU,OAAO,CAACE,GAAI,yGAAjC,CAAf;EACH;;EACD,MAAMX,wBAAwB,GAAGM,IAAI,CAACM,KAAL,CAAWH,OAAO,CAACZ,KAAnB,CAAjC;EACA,MAAMF,eAAe,GAAGS,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBI,OAAlB,CAAd,EAA0C;IAAEZ,KAAK,EAAE;MAAEK,QAAQ,EAAEF,wBAAwB,CAACC;IAArC;EAAT,CAA1C,CAAxB;EACA,OAAON,eAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,iBAAT,CAA2BD,OAA3B,EAAoC;EACvC,OAAQA,OAAO,IACXA,OAAO,CAACI,WAAR,KAAwBrB,0BADpB,IAEJ,OAAOiB,OAAO,CAACZ,KAAf,KAAyB,QAF7B;AAGH"},"metadata":{},"sourceType":"module"}