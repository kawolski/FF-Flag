{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport function toWebResourceLike(request) {\n  return {\n    url: request.url,\n    method: request.method,\n    headers: toHttpHeaderLike(request.headers),\n    withCredentials: request.withCredentials,\n    timeout: request.timeout,\n    requestId: request.headers.get(\"x-ms-client-request-id\") || \"\"\n  };\n}\nexport function toHttpHeaderLike(headers) {\n  return new HttpHeaders(headers.toJSON({\n    preserveCase: true\n  }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\n\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\n\n\nexport class HttpHeaders {\n  constructor(rawHeaders) {\n    this._headersMap = {};\n\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n\n\n  set(headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n\n\n  get(headerName) {\n    const header = this._headersMap[getHeaderKey(headerName)];\n\n    return !header ? undefined : header.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n\n\n  contains(headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n\n\n  remove(headerName) {\n    const result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n\n\n  rawHeaders() {\n    return this.toJson({\n      preserveCase: true\n    });\n  }\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n\n\n  headersArray() {\n    const headers = [];\n\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n\n    return headers;\n  }\n  /**\n   * Get the header names that are contained in this collection.\n   */\n\n\n  headerNames() {\n    const headerNames = [];\n    const headers = this.headersArray();\n\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n\n    return headerNames;\n  }\n  /**\n   * Get the header values that are contained in this collection.\n   */\n\n\n  headerValues() {\n    const headerValues = [];\n    const headers = this.headersArray();\n\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n\n    return headerValues;\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  toJson(options = {}) {\n    const result = {};\n\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJson({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n\n\n  clone() {\n    const resultPreservingCasing = {};\n\n    for (const headerKey in this._headersMap) {\n      const header = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n\n    return new HttpHeaders(resultPreservingCasing);\n  }\n\n}","map":{"version":3,"names":["toWebResourceLike","request","url","method","headers","toHttpHeaderLike","withCredentials","timeout","requestId","get","HttpHeaders","toJSON","preserveCase","getHeaderKey","headerName","toLowerCase","constructor","rawHeaders","_headersMap","set","headerValue","name","value","toString","header","undefined","contains","remove","result","toJson","headersArray","headerKey","push","headerNames","i","length","headerValues","options","JSON","stringify","clone","resultPreservingCasing"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-http-compat/dist-esm/src/util.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport function toWebResourceLike(request) {\n    return {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeaderLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || \"\",\n    };\n}\nexport function toHttpHeaderLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}