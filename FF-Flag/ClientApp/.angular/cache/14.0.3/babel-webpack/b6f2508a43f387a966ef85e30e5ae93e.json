{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\n\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\n\nexport function tracingPolicy(options = {}) {\n  const userAgent = getUserAgentValue(options.userAgentPrefix);\n  const tracingClient = tryCreateTracingClient();\n  return {\n    name: tracingPolicyName,\n\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n\n        if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n          return next(request);\n        }\n\n        const {\n          span,\n          tracingContext\n        } = (_b = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b !== void 0 ? _b : {};\n\n        if (!span || !tracingContext) {\n          return next(request);\n        }\n\n        try {\n          const response = yield tracingClient.withContext(tracingContext, next, request);\n          tryProcessResponse(span, response);\n          return response;\n        } catch (err) {\n          tryProcessError(span, err);\n          throw err;\n        }\n      })();\n    }\n\n  };\n}\n\nfunction tryCreateTracingClient() {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION\n    });\n  } catch (e) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryCreateSpan(tracingClient, request, userAgent) {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(`HTTP ${request.method}`, {\n      tracingOptions: request.tracingOptions\n    }, {\n      spanKind: \"client\",\n      spanAttributes: {\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId\n      }\n    }); // If the span is not recording, don't do any more work.\n\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n\n    if (userAgent) {\n      span.setAttribute(\"http.user_agent\", userAgent);\n    } // set headers\n\n\n    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n\n    return {\n      span,\n      tracingContext: updatedOptions.tracingOptions.tracingContext\n    };\n  } catch (e) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryProcessError(span, error) {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined\n    });\n\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n\nfunction tryProcessResponse(span, response) {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n\n    span.setStatus({\n      status: \"success\"\n    });\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}","map":{"version":3,"names":["createTracingClient","SDK_VERSION","getUserAgentValue","logger","getErrorMessage","isError","isRestError","tracingPolicyName","tracingPolicy","options","userAgent","userAgentPrefix","tracingClient","tryCreateTracingClient","name","sendRequest","request","next","_a","_b","tracingOptions","tracingContext","span","tryCreateSpan","response","withContext","tryProcessResponse","err","tryProcessError","namespace","packageName","packageVersion","e","warning","undefined","updatedOptions","startSpan","method","spanKind","spanAttributes","url","requestId","isRecording","end","setAttribute","headers","createRequestHeaders","key","value","Object","entries","set","error","setStatus","status","statusCode","serviceRequestId","get"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tracingPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient, } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n    const userAgent = getUserAgentValue(options.userAgentPrefix);\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                return next(request);\n            }\n            const { span, tracingContext } = (_b = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b !== void 0 ? _b : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return createTracingClient({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: SDK_VERSION,\n        });\n    }\n    catch (e) {\n        logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, userAgent) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes: {\n                \"http.method\": request.method,\n                \"http.url\": request.url,\n                requestId: request.requestId,\n            },\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        if (userAgent) {\n            span.setAttribute(\"http.user_agent\", userAgent);\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: isError(error) ? error : undefined,\n        });\n        if (isRestError(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            status: \"success\",\n        });\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}