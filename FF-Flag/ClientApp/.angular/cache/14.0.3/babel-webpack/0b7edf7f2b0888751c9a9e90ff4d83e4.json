{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map) {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl {\n  constructor(rawHeaders) {\n    this._headersMap = new Map();\n\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n\n\n  set(name, value) {\n    this._headersMap.set(normalizeName(name), {\n      name,\n      value: String(value)\n    });\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n\n\n  get(name) {\n    var _a;\n\n    return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n\n\n  has(name) {\n    return this._headersMap.has(normalizeName(name));\n  }\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n\n\n  delete(name) {\n    this._headersMap.delete(normalizeName(name));\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  toJSON(options = {}) {\n    const result = {};\n\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n\n\n  [Symbol.iterator]() {\n    return headerIterator(this._headersMap);\n  }\n\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\n\n\nexport function createHttpHeaders(rawHeaders) {\n  return new HttpHeadersImpl(rawHeaders);\n}","map":{"version":3,"names":["normalizeName","name","toLowerCase","headerIterator","map","entry","values","value","HttpHeadersImpl","constructor","rawHeaders","_headersMap","Map","headerName","Object","keys","set","String","get","_a","has","delete","toJSON","options","result","preserveCase","normalizedName","toString","JSON","stringify","Symbol","iterator","createHttpHeaders"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/httpHeaders.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value) });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;EACzB,OAAOA,IAAI,CAACC,WAAL,EAAP;AACH;;AACD,UAAUC,cAAV,CAAyBC,GAAzB,EAA8B;EAC1B,KAAK,MAAMC,KAAX,IAAoBD,GAAG,CAACE,MAAJ,EAApB,EAAkC;IAC9B,MAAM,CAACD,KAAK,CAACJ,IAAP,EAAaI,KAAK,CAACE,KAAnB,CAAN;EACH;AACJ;;AACD,MAAMC,eAAN,CAAsB;EAClBC,WAAW,CAACC,UAAD,EAAa;IACpB,KAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;;IACA,IAAIF,UAAJ,EAAgB;MACZ,KAAK,MAAMG,UAAX,IAAyBC,MAAM,CAACC,IAAP,CAAYL,UAAZ,CAAzB,EAAkD;QAC9C,KAAKM,GAAL,CAASH,UAAT,EAAqBH,UAAU,CAACG,UAAD,CAA/B;MACH;IACJ;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,GAAG,CAACf,IAAD,EAAOM,KAAP,EAAc;IACb,KAAKI,WAAL,CAAiBK,GAAjB,CAAqBhB,aAAa,CAACC,IAAD,CAAlC,EAA0C;MAAEA,IAAF;MAAQM,KAAK,EAAEU,MAAM,CAACV,KAAD;IAArB,CAA1C;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIW,GAAG,CAACjB,IAAD,EAAO;IACN,IAAIkB,EAAJ;;IACA,OAAO,CAACA,EAAE,GAAG,KAAKR,WAAL,CAAiBO,GAAjB,CAAqBlB,aAAa,CAACC,IAAD,CAAlC,CAAN,MAAqD,IAArD,IAA6DkB,EAAE,KAAK,KAAK,CAAzE,GAA6E,KAAK,CAAlF,GAAsFA,EAAE,CAACZ,KAAhG;EACH;EACD;AACJ;AACA;AACA;;;EACIa,GAAG,CAACnB,IAAD,EAAO;IACN,OAAO,KAAKU,WAAL,CAAiBS,GAAjB,CAAqBpB,aAAa,CAACC,IAAD,CAAlC,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIoB,MAAM,CAACpB,IAAD,EAAO;IACT,KAAKU,WAAL,CAAiBU,MAAjB,CAAwBrB,aAAa,CAACC,IAAD,CAArC;EACH;EACD;AACJ;AACA;;;EACIqB,MAAM,CAACC,OAAO,GAAG,EAAX,EAAe;IACjB,MAAMC,MAAM,GAAG,EAAf;;IACA,IAAID,OAAO,CAACE,YAAZ,EAA0B;MACtB,KAAK,MAAMpB,KAAX,IAAoB,KAAKM,WAAL,CAAiBL,MAAjB,EAApB,EAA+C;QAC3CkB,MAAM,CAACnB,KAAK,CAACJ,IAAP,CAAN,GAAqBI,KAAK,CAACE,KAA3B;MACH;IACJ,CAJD,MAKK;MACD,KAAK,MAAM,CAACmB,cAAD,EAAiBrB,KAAjB,CAAX,IAAsC,KAAKM,WAA3C,EAAwD;QACpDa,MAAM,CAACE,cAAD,CAAN,GAAyBrB,KAAK,CAACE,KAA/B;MACH;IACJ;;IACD,OAAOiB,MAAP;EACH;EACD;AACJ;AACA;;;EACIG,QAAQ,GAAG;IACP,OAAOC,IAAI,CAACC,SAAL,CAAe,KAAKP,MAAL,CAAY;MAAEG,YAAY,EAAE;IAAhB,CAAZ,CAAf,CAAP;EACH;EACD;AACJ;AACA;;;EACoB,CAAfK,MAAM,CAACC,QAAQ,IAAI;IAChB,OAAO5B,cAAc,CAAC,KAAKQ,WAAN,CAArB;EACH;;AArEiB;AAuEtB;AACA;AACA;AACA;;;AACA,OAAO,SAASqB,iBAAT,CAA2BtB,UAA3B,EAAuC;EAC1C,OAAO,IAAIF,eAAJ,CAAoBE,UAApB,CAAP;AACH"},"metadata":{},"sourceType":"module"}