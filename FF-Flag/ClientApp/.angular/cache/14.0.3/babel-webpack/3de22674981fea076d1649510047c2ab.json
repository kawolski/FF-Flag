{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\n\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\n\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\n\nfunction getRetryAfterInMs(response) {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    } // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n\n\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now(); // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e) {\n    return undefined;\n  }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\n\n\nexport function isThrottlingRetryResponse(response) {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n  return {\n    name: \"throttlingRetryStrategy\",\n\n    retry({\n      response\n    }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n\n      if (!Number.isFinite(retryAfterInMs)) {\n        return {\n          skipStrategy: true\n        };\n      }\n\n      return {\n        retryAfterInMs\n      };\n    }\n\n  };\n}","map":{"version":3,"names":["parseHeaderValueAsNumber","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","response","includes","status","undefined","header","retryAfterValue","multiplyingFactor","retryAfterHeader","headers","get","date","Date","parse","diff","now","Number","isFinite","Math","max","e","isThrottlingRetryResponse","throttlingRetryStrategy","name","retry","retryAfterInMs","skipStrategy"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/throttlingRetryStrategy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = parseHeaderValueAsNumber(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,wBAAT,QAAyC,iBAAzC;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAAC,gBAAD,EAAmB,qBAAnB,EAA0CD,gBAA1C,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,iBAAT,CAA2BC,QAA3B,EAAqC;EACjC,IAAI,EAAEA,QAAQ,IAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,QAAX,CAAoBD,QAAQ,CAACE,MAA7B,CAAd,CAAJ,EACI,OAAOC,SAAP;;EACJ,IAAI;IACA;IACA,KAAK,MAAMC,MAAX,IAAqBN,oBAArB,EAA2C;MACvC,MAAMO,eAAe,GAAGT,wBAAwB,CAACI,QAAD,EAAWI,MAAX,CAAhD;;MACA,IAAIC,eAAe,KAAK,CAApB,IAAyBA,eAA7B,EAA8C;QAC1C;QACA;QACA,MAAMC,iBAAiB,GAAGF,MAAM,KAAKP,gBAAX,GAA8B,IAA9B,GAAqC,CAA/D;QACA,OAAOQ,eAAe,GAAGC,iBAAzB,CAJ0C,CAIE;MAC/C;IACJ,CAVD,CAWA;;;IACA,MAAMC,gBAAgB,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,GAAjB,CAAqBZ,gBAArB,CAAzB;IACA,IAAI,CAACU,gBAAL,EACI;IACJ,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAb;IACA,MAAMM,IAAI,GAAGH,IAAI,GAAGC,IAAI,CAACG,GAAL,EAApB,CAhBA,CAiBA;;IACA,OAAOC,MAAM,CAACC,QAAP,CAAgBH,IAAhB,IAAwBI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,IAAZ,CAAxB,GAA4CV,SAAnD;EACH,CAnBD,CAoBA,OAAOgB,CAAP,EAAU;IACN,OAAOhB,SAAP;EACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,OAAO,SAASiB,yBAAT,CAAmCpB,QAAnC,EAA6C;EAChD,OAAOe,MAAM,CAACC,QAAP,CAAgBjB,iBAAiB,CAACC,QAAD,CAAjC,CAAP;AACH;AACD,OAAO,SAASqB,uBAAT,GAAmC;EACtC,OAAO;IACHC,IAAI,EAAE,yBADH;;IAEHC,KAAK,CAAC;MAAEvB;IAAF,CAAD,EAAe;MAChB,MAAMwB,cAAc,GAAGzB,iBAAiB,CAACC,QAAD,CAAxC;;MACA,IAAI,CAACe,MAAM,CAACC,QAAP,CAAgBQ,cAAhB,CAAL,EAAsC;QAClC,OAAO;UAAEC,YAAY,EAAE;QAAhB,CAAP;MACH;;MACD,OAAO;QACHD;MADG,CAAP;IAGH;;EAVE,CAAP;AAYH"},"metadata":{},"sourceType":"module"}