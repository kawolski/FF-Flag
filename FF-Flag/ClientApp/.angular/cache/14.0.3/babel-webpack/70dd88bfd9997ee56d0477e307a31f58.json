{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\n\nexport const AzureLogger = debug(\"azure\");\n\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n  }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\n\n\nexport function setLogLevel(level) {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n  }\n\n  azureLogLevel = level;\n  const enabledNamespaces = [];\n\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\n\nexport function getLogLevel() {\n  return azureLogLevel;\n}\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\n\nexport function createClientLogger(namespace) {\n  const clientRootLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\n\nfunction patchLogMethod(parent, child) {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent, level) {\n  const logger = Object.assign(parent.extend(level), {\n    level\n  });\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n  return logger;\n}\n\nfunction shouldEnable(logger) {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\n\nfunction isAzureLogLevel(logLevel) {\n  return AZURE_LOG_LEVELS.includes(logLevel);\n}","map":{"version":3,"names":["debug","registeredLoggers","Set","logLevelFromEnv","process","env","AZURE_LOG_LEVEL","undefined","azureLogLevel","AzureLogger","log","args","AZURE_LOG_LEVELS","isAzureLogLevel","setLogLevel","console","error","join","level","Error","enabledNamespaces","logger","shouldEnable","push","namespace","enable","getLogLevel","levelMap","verbose","info","warning","createClientLogger","clientRootLogger","extend","patchLogMethod","createLogger","parent","child","Object","assign","disable","add","Boolean","logLevel","includes"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/logger/dist-esm/src/index.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n    debug.log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = debug.disable();\n        debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}