{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\n\nexport class AzureSASCredential {\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  get signature() {\n    return this._signature;\n  }\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n\n\n  constructor(signature) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = signature;\n  }\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n\n\n  update(newSignature) {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = newSignature;\n  }\n\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\n\nexport function isSASCredential(credential) {\n  return isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureSASCredential","signature","_signature","constructor","Error","update","newSignature","isSASCredential","credential"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-auth/dist-esm/src/azureSASCredential.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential) {\n    return (isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAT,QAAuC,kBAAvC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAN,CAAyB;EAC5B;AACJ;AACA;EACiB,IAATC,SAAS,GAAG;IACZ,OAAO,KAAKC,UAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,WAAW,CAACF,SAAD,EAAY;IACnB,IAAI,CAACA,SAAL,EAAgB;MACZ,MAAM,IAAIG,KAAJ,CAAU,oDAAV,CAAN;IACH;;IACD,KAAKF,UAAL,GAAkBD,SAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACII,MAAM,CAACC,YAAD,EAAe;IACjB,IAAI,CAACA,YAAL,EAAmB;MACf,MAAM,IAAIF,KAAJ,CAAU,oDAAV,CAAN;IACH;;IACD,KAAKF,UAAL,GAAkBI,YAAlB;EACH;;AAhC2B;AAkChC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;EACxC,OAAQT,sBAAsB,CAACS,UAAD,EAAa,CAAC,WAAD,CAAb,CAAtB,IAAqD,OAAOA,UAAU,CAACP,SAAlB,KAAgC,QAA7F;AACH"},"metadata":{},"sourceType":"module"}