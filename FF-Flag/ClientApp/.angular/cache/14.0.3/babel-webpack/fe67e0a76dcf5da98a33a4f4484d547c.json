{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MapperTypeNames } from \"./serializer\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\n\nexport function getStreamingResponseStatusCodes(operationSpec) {\n  const result = new Set();\n\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n      result.add(Number(statusCode));\n    }\n  }\n\n  return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\n\nexport function getPathStringFromParameter(parameter) {\n  const {\n    parameterPath,\n    mapper\n  } = parameter;\n  let result;\n\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName;\n  }\n\n  return result;\n}","map":{"version":3,"names":["MapperTypeNames","getStreamingResponseStatusCodes","operationSpec","result","Set","statusCode","responses","operationResponse","bodyMapper","type","name","Stream","add","Number","getPathStringFromParameter","parameter","parameterPath","mapper","Array","isArray","join","serializedName"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-client/dist-esm/src/interfaceHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MapperTypeNames } from \"./serializer\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,eAAT,QAAgC,cAAhC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,aAAzC,EAAwD;EAC3D,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;EACA,KAAK,MAAMC,UAAX,IAAyBH,aAAa,CAACI,SAAvC,EAAkD;IAC9C,MAAMC,iBAAiB,GAAGL,aAAa,CAACI,SAAd,CAAwBD,UAAxB,CAA1B;;IACA,IAAIE,iBAAiB,CAACC,UAAlB,IACAD,iBAAiB,CAACC,UAAlB,CAA6BC,IAA7B,CAAkCC,IAAlC,KAA2CV,eAAe,CAACW,MAD/D,EACuE;MACnER,MAAM,CAACS,GAAP,CAAWC,MAAM,CAACR,UAAD,CAAjB;IACH;EACJ;;EACD,OAAOF,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,0BAAT,CAAoCC,SAApC,EAA+C;EAClD,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAA4BF,SAAlC;EACA,IAAIZ,MAAJ;;EACA,IAAI,OAAOa,aAAP,KAAyB,QAA7B,EAAuC;IACnCb,MAAM,GAAGa,aAAT;EACH,CAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcH,aAAd,CAAJ,EAAkC;IACnCb,MAAM,GAAGa,aAAa,CAACI,IAAd,CAAmB,GAAnB,CAAT;EACH,CAFI,MAGA;IACDjB,MAAM,GAAGc,MAAM,CAACI,cAAhB;EACH;;EACD,OAAOlB,MAAP;AACH"},"metadata":{},"sourceType":"module"}