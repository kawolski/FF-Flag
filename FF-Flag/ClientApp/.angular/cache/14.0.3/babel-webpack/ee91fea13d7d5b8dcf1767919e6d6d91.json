{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\n\nexport class AbortSignal {\n  constructor() {\n    /**\n     * onabort event listener.\n     */\n    this.onabort = null;\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n\n\n  get aborted() {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this);\n  }\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n\n\n  static get none() {\n    return new AbortSignal();\n  }\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n\n\n  addEventListener( // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this);\n    listeners.push(listener);\n  }\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n\n\n  removeEventListener( // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this);\n    const index = listeners.indexOf(listener);\n\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n\n\n  dispatchEvent(_event) {\n    throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n  }\n\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n\nexport function abortSignal(signal) {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal);\n\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach(listener => {\n      listener.call(signal, {\n        type: \"abort\"\n      });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}","map":{"version":3,"names":["listenersMap","WeakMap","abortedMap","AbortSignal","constructor","onabort","set","aborted","has","TypeError","get","none","addEventListener","_type","listener","listeners","push","removeEventListener","index","indexOf","splice","dispatchEvent","_event","Error","abortSignal","signal","call","slice","forEach","type"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal {\n    constructor() {\n        /**\n         * onabort event listener.\n         */\n        this.onabort = null;\n        listenersMap.set(this, []);\n        abortedMap.set(this, false);\n    }\n    /**\n     * Status of whether aborted or not.\n     *\n     * @readonly\n     */\n    get aborted() {\n        if (!abortedMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        return abortedMap.get(this);\n    }\n    /**\n     * Creates a new AbortSignal instance that will never be aborted.\n     *\n     * @readonly\n     */\n    static get none() {\n        return new AbortSignal();\n    }\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */\n    addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        listeners.push(listener);\n    }\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */\n    removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    }\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */\n    dispatchEvent(_event) {\n        throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    }\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal) {\n    if (signal.aborted) {\n        return;\n    }\n    if (signal.onabort) {\n        signal.onabort.call(signal);\n    }\n    const listeners = listenersMap.get(signal);\n    if (listeners) {\n        // Create a copy of listeners so mutations to the array\n        // (e.g. via removeListener calls) don't affect the listeners\n        // we invoke.\n        listeners.slice().forEach((listener) => {\n            listener.call(signal, { type: \"abort\" });\n        });\n    }\n    abortedMap.set(signal, true);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,IAAIC,OAAJ,EAArB;AACA,MAAMC,UAAU,GAAG,IAAID,OAAJ,EAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,WAAN,CAAkB;EACrBC,WAAW,GAAG;IACV;AACR;AACA;IACQ,KAAKC,OAAL,GAAe,IAAf;IACAL,YAAY,CAACM,GAAb,CAAiB,IAAjB,EAAuB,EAAvB;IACAJ,UAAU,CAACI,GAAX,CAAe,IAAf,EAAqB,KAArB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACe,IAAPC,OAAO,GAAG;IACV,IAAI,CAACL,UAAU,CAACM,GAAX,CAAe,IAAf,CAAL,EAA2B;MACvB,MAAM,IAAIC,SAAJ,CAAc,mDAAd,CAAN;IACH;;IACD,OAAOP,UAAU,CAACQ,GAAX,CAAe,IAAf,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACmB,WAAJC,IAAI,GAAG;IACd,OAAO,IAAIR,WAAJ,EAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIS,gBAAgB,EAChB;EACAC,KAFgB,EAETC,QAFS,EAEC;IACb,IAAI,CAACd,YAAY,CAACQ,GAAb,CAAiB,IAAjB,CAAL,EAA6B;MACzB,MAAM,IAAIC,SAAJ,CAAc,mDAAd,CAAN;IACH;;IACD,MAAMM,SAAS,GAAGf,YAAY,CAACU,GAAb,CAAiB,IAAjB,CAAlB;IACAK,SAAS,CAACC,IAAV,CAAeF,QAAf;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,mBAAmB,EACnB;EACAJ,KAFmB,EAEZC,QAFY,EAEF;IACb,IAAI,CAACd,YAAY,CAACQ,GAAb,CAAiB,IAAjB,CAAL,EAA6B;MACzB,MAAM,IAAIC,SAAJ,CAAc,mDAAd,CAAN;IACH;;IACD,MAAMM,SAAS,GAAGf,YAAY,CAACU,GAAb,CAAiB,IAAjB,CAAlB;IACA,MAAMQ,KAAK,GAAGH,SAAS,CAACI,OAAV,CAAkBL,QAAlB,CAAd;;IACA,IAAII,KAAK,GAAG,CAAC,CAAb,EAAgB;MACZH,SAAS,CAACK,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;IACH;EACJ;EACD;AACJ;AACA;;;EACIG,aAAa,CAACC,MAAD,EAAS;IAClB,MAAM,IAAIC,KAAJ,CAAU,kHAAV,CAAN;EACH;;AAlEoB;AAoEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;EAChC,IAAIA,MAAM,CAAClB,OAAX,EAAoB;IAChB;EACH;;EACD,IAAIkB,MAAM,CAACpB,OAAX,EAAoB;IAChBoB,MAAM,CAACpB,OAAP,CAAeqB,IAAf,CAAoBD,MAApB;EACH;;EACD,MAAMV,SAAS,GAAGf,YAAY,CAACU,GAAb,CAAiBe,MAAjB,CAAlB;;EACA,IAAIV,SAAJ,EAAe;IACX;IACA;IACA;IACAA,SAAS,CAACY,KAAV,GAAkBC,OAAlB,CAA2Bd,QAAD,IAAc;MACpCA,QAAQ,CAACY,IAAT,CAAcD,MAAd,EAAsB;QAAEI,IAAI,EAAE;MAAR,CAAtB;IACH,CAFD;EAGH;;EACD3B,UAAU,CAACI,GAAX,CAAemB,MAAf,EAAuB,IAAvB;AACH"},"metadata":{},"sourceType":"module"}