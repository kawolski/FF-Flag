{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logPolicy } from \"./policies/logPolicy\";\nimport { createEmptyPipeline } from \"./pipeline\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\n\nexport function createPipelineFromOptions(options) {\n  var _a;\n\n  const pipeline = createEmptyPipeline();\n\n  if (isNode) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy());\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), {\n    afterPhase: \"Retry\"\n  });\n\n  if (isNode) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNode","proxyPolicy","setClientRequestIdPolicy","tlsPolicy","tracingPolicy","createPipelineFromOptions","options","_a","pipeline","tlsOptions","addPolicy","proxyOptions","userAgentOptions","telemetryOptions","clientRequestIdHeaderName","retryOptions","phase","afterPhase","redirectOptions","loggingOptions"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/createPipelineFromOptions.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logPolicy } from \"./policies/logPolicy\";\nimport { createEmptyPipeline } from \"./pipeline\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = createEmptyPipeline();\n    if (isNode) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy());\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n    if (isNode) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,wBAAT,QAAyC,qCAAzC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,wBAAT,QAAyC,qCAAzC;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;EAC/C,IAAIC,EAAJ;;EACA,MAAMC,QAAQ,GAAGd,mBAAmB,EAApC;;EACA,IAAIM,MAAJ,EAAY;IACR,IAAIM,OAAO,CAACG,UAAZ,EAAwB;MACpBD,QAAQ,CAACE,SAAT,CAAmBP,SAAS,CAACG,OAAO,CAACG,UAAT,CAA5B;IACH;;IACDD,QAAQ,CAACE,SAAT,CAAmBT,WAAW,CAACK,OAAO,CAACK,YAAT,CAA9B;IACAH,QAAQ,CAACE,SAAT,CAAmBb,wBAAwB,EAA3C;EACH;;EACDW,QAAQ,CAACE,SAAT,CAAmBX,cAAc,EAAjC;EACAS,QAAQ,CAACE,SAAT,CAAmBd,eAAe,CAACU,OAAO,CAACM,gBAAT,CAAlC;EACAJ,QAAQ,CAACE,SAAT,CAAmBR,wBAAwB,CAAC,CAACK,EAAE,GAAGD,OAAO,CAACO,gBAAd,MAAoC,IAApC,IAA4CN,EAAE,KAAK,KAAK,CAAxD,GAA4D,KAAK,CAAjE,GAAqEA,EAAE,CAACO,yBAAzE,CAA3C;EACAN,QAAQ,CAACE,SAAT,CAAmBZ,kBAAkB,CAACQ,OAAO,CAACS,YAAT,CAArC,EAA6D;IAAEC,KAAK,EAAE;EAAT,CAA7D;EACAR,QAAQ,CAACE,SAAT,CAAmBN,aAAa,CAACE,OAAO,CAACM,gBAAT,CAAhC,EAA4D;IAAEK,UAAU,EAAE;EAAd,CAA5D;;EACA,IAAIjB,MAAJ,EAAY;IACR;IACA;IACAQ,QAAQ,CAACE,SAAT,CAAmBf,cAAc,CAACW,OAAO,CAACY,eAAT,CAAjC,EAA4D;MAAED,UAAU,EAAE;IAAd,CAA5D;EACH;;EACDT,QAAQ,CAACE,SAAT,CAAmBjB,SAAS,CAACa,OAAO,CAACa,cAAT,CAA5B,EAAsD;IAAEF,UAAU,EAAE;EAAd,CAAtD;EACA,OAAOT,QAAP;AACH"},"metadata":{},"sourceType":"module"}