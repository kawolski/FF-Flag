{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n */\nexport function encodeString(value) {\n  return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n */\n\nexport function encodeByteArray(value) {\n  let str = \"\";\n\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n\n  return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n */\n\nexport function decodeString(value) {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n\n  return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n */\n\nexport function decodeStringToString(value) {\n  return atob(value);\n}","map":{"version":3,"names":["encodeString","value","btoa","encodeByteArray","str","i","length","String","fromCharCode","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","decodeStringToString"],"sources":["C:/Users/prash/source/repos/FF-Flag/FF-Flag/ClientApp/node_modules/@azure/core-client/dist-esm/src/base64.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n */\nexport function encodeString(value) {\n    return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n */\nexport function encodeByteArray(value) {\n    let str = \"\";\n    for (let i = 0; i < value.length; i++) {\n        str += String.fromCharCode(value[i]);\n    }\n    return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n */\nexport function decodeString(value) {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n */\nexport function decodeStringToString(value) {\n    return atob(value);\n}\n"],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;EAChC,OAAOC,IAAI,CAACD,KAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASE,eAAT,CAAyBF,KAAzB,EAAgC;EACnC,IAAIG,GAAG,GAAG,EAAV;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACnCD,GAAG,IAAIG,MAAM,CAACC,YAAP,CAAoBP,KAAK,CAACI,CAAD,CAAzB,CAAP;EACH;;EACD,OAAOH,IAAI,CAACE,GAAD,CAAX;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASK,YAAT,CAAsBR,KAAtB,EAA6B;EAChC,MAAMS,UAAU,GAAGC,IAAI,CAACV,KAAD,CAAvB;EACA,MAAMW,GAAG,GAAG,IAAIC,UAAJ,CAAeH,UAAU,CAACJ,MAA1B,CAAZ;;EACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACJ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;IACxCO,GAAG,CAACP,CAAD,CAAH,GAASK,UAAU,CAACI,UAAX,CAAsBT,CAAtB,CAAT;EACH;;EACD,OAAOO,GAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA8Bd,KAA9B,EAAqC;EACxC,OAAOU,IAAI,CAACV,KAAD,CAAX;AACH"},"metadata":{},"sourceType":"module"}